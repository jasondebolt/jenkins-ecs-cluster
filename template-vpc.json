{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Generates a VPC (Virtual Private Cloud), public and private subnet(s), NAT gateway(s), internet gateway(s), VPC security group(s), route tables, and network ACL's in AWS.",
  "Parameters": {
    "Environment": {
      "Description": "The environment (dev, testing, prod, etc.) of the VPC.",
      "Type": "String"
    },
    "VPCCidrBlock": {
      "Type": "String",
      "Description": "The CIDR range for the VPC. Examples include 10.0.0.0/16, 10.1.0.0/16, 10.2.0.0/16, etc. Make sure to use different CIDR ranges for each VPC you create.",
      "Default": "10.0.0.0/16"
    },
    "PrivateSubnet1CidrBlock": {
      "Type": "String",
      "Description": "The CIDR range for the first private subnet. Examples include 10.0.1.0/24, 10.1.1.0/24, 10.2.1.0/24, etc. Make sure the subnet CIDR range is within the same CIDR range as the VPC, and also make sure that the third digit is odd, since it's a private subnet.",
      "Default": "10.0.1.0/24"
    },
    "PrivateSubnet2CidrBlock": {
      "Type": "String",
      "Description": "The CIDR range for the second private subnet. Examples include 10.0.3.0/24, 10.1.3.0/24, 10.2.3.0/24, etc. Make sure the subnet CIDR range is within the same CIDR range as the VPC, and also make sure that the third digit is odd, since it's a private subnet.",
      "Default": "10.0.3.0/24"
    },
    "PublicSubnet1CidrBlock": {
      "Type": "String",
      "Description": "The CIDR range for the first public subnet. Examples include 10.0.2.0/24, 10.1.2.0/24, 10.2.2.0/24, etc. Make sure the subnet CIDR range is within the same CIDR range as the VPC, and also make sure that the third digit is even, since it's a public subnet.",
      "Default": "10.0.2.0/24"
    },
    "PublicSubnet2CidrBlock": {
      "Type": "String",
      "Description": "The CIDR range for the second public subnet. Examples include 10.0.4.0/24, 10.1.4.0/24, 10.2.4.0/24, etc. Make sure the subnet CIDR range is within the same CIDR range as the VPC, and also make sure that the third digit is even, since it's a public subnet.",
      "Default": "10.0.4.0/24"
    },
    "Tenancy": {
      "Type": "String",
      "Description": "Then VPC tenancy",
      "AllowedValues": ["default", "dedicated"],
      "Default": "default"
    }
  },
  "Resources": {
    "EIPNATAZ1": {
      "Type": "AWS::EC2::EIP",
      "Properties": {
        "Domain": "vpc"
      },
      "Type": "AWS::EC2::EIP"
    },
    "EIPNATAZ2": {
      "Properties": {
        "Domain": "vpc"
      },
      "Type": "AWS::EC2::EIP"
    },
    "IGW1": {
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": {"Fn::Join": ["-", [
              {"Ref": "Environment"},
              "IGW1"
            ]]}
          }
        ]
      },
      "Type": "AWS::EC2::InternetGateway"
    },
    "IGW1Attachment": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "InternetGatewayId": {
          "Ref": "IGW1"
        },
        "VpcId": {
          "Ref": "VPC"
        }
      }
    },
    "IGW1AttachmentRoute": {
      "DependsOn": ["IGW1Attachment"],
      "Type": "AWS::EC2::Route",
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "IGW1"
        },
        "RouteTableId": {
          "Ref": "RouteTablePublic"
        }
      }
    },
    "NatAZ1": {
      "DependsOn": "IGW1Attachment",
      "Type": "AWS::EC2::NatGateway",
      "Properties": {
        "AllocationId": {
          "Fn::GetAtt": ["EIPNATAZ1", "AllocationId"]
        },
        "SubnetId": {
          "Ref": "PublicSubnetAZ1"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {"Fn::Join": ["-", [
              {"Ref": "Environment"},
              "NatAZ1"
            ]]}
          }
        ]
      }
    },
    "NatAZ1Route": {
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "NatGatewayId": {
          "Ref": "NatAZ1"
        },
        "RouteTableId": {
          "Ref": "RouteTablePrivateAZ1"
        }
      },
      "Type": "AWS::EC2::Route"
    },
    "NatAZ2": {
      "DependsOn": "IGW1Attachment",
      "Properties": {
        "AllocationId": {
          "Fn::GetAtt": ["EIPNATAZ2", "AllocationId"]
        },
        "SubnetId": {
          "Ref": "PublicSubnetAZ2"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {"Fn::Join": ["-", [
              {"Ref": "Environment"},
              "NatAZ2"
            ]]}
          }
        ]
      },
      "Type": "AWS::EC2::NatGateway"
    },
    "NatAZ2Route": {
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "NatGatewayId": {
          "Ref": "NatAZ2"
        },
        "RouteTableId": {
          "Ref": "RouteTablePrivateAZ2"
        }
      },
      "Type": "AWS::EC2::Route"
    },
    "PrivateSubnetAZ1": {
      "Properties": {
        "AvailabilityZone": {
          "Fn::Select": ["0", {
            "Fn::GetAZs": {
              "Ref": "AWS::Region"
            }
          }]
        },
        "CidrBlock": {
          "Ref": "PrivateSubnet1CidrBlock"
        },
        "MapPublicIpOnLaunch": "false",
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {"Fn::Join": ["-", [
              {"Ref": "Environment"},
              "PrivateSubnetAZ1"
            ]]}
          }
        ]
      },
      "Type": "AWS::EC2::Subnet"
    },
    "PrivateSubnetAZ1RouteTbl": {
      "Properties": {
        "RouteTableId": {
          "Ref": "RouteTablePrivateAZ1"
        },
        "SubnetId": {
          "Ref": "PrivateSubnetAZ1"
        }
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation"
    },
    "PrivateSubnetAZ2": {
      "Properties": {
        "AvailabilityZone": {
          "Fn::Select": ["1", {
            "Fn::GetAZs": {
              "Ref": "AWS::Region"
            }
          }]
        },
        "CidrBlock": {
          "Ref": "PrivateSubnet2CidrBlock"
        },
        "MapPublicIpOnLaunch": "false",
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {"Fn::Join": ["-", [
              {"Ref": "Environment"},
              "PrivateSubnetAZ2"
            ]]}
          }
        ]
      },
      "Type": "AWS::EC2::Subnet"
    },
    "PrivateSubnetAZ2RouteTbl": {
      "Properties": {
        "RouteTableId": {
          "Ref": "RouteTablePrivateAZ2"
        },
        "SubnetId": {
          "Ref": "PrivateSubnetAZ2"
        }
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation"
    },
    "PublicSubnetAZ1": {
      "Properties": {
        "AvailabilityZone": {
          "Fn::Select": ["0", {
            "Fn::GetAZs": {
              "Ref": "AWS::Region"
            }
          }]
        },
        "CidrBlock": {
          "Ref": "PublicSubnet1CidrBlock"
        },
        "MapPublicIpOnLaunch": "true",
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {"Fn::Join": ["-", [
              {"Ref": "Environment"},
              "PublicSubnetAZ1"
            ]]}
          }
        ]
      },
      "Type": "AWS::EC2::Subnet"
    },
    "PublicSubnetAZ1RouteTbl": {
      "Properties": {
        "RouteTableId": {
          "Ref": "RouteTablePublic"
        },
        "SubnetId": {
          "Ref": "PublicSubnetAZ1"
        }
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation"
    },
    "PublicSubnetAZ2": {
      "Properties": {
        "AvailabilityZone": {
          "Fn::Select": ["1", {
            "Fn::GetAZs": {
              "Ref": "AWS::Region"
            }
          }]
        },
        "CidrBlock": {
          "Ref": "PublicSubnet2CidrBlock"
        },
        "MapPublicIpOnLaunch": "true",
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {"Fn::Join": ["-", [
              {"Ref": "Environment"},
              "PublicSubnetAZ2"
            ]]}
          }
        ]
      },
      "Type": "AWS::EC2::Subnet"
    },
    "PublicSubnetAZ2RouteTbl": {
      "Properties": {
        "RouteTableId": {
          "Ref": "RouteTablePublic"
        },
        "SubnetId": {
          "Ref": "PublicSubnetAZ2"
        }
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation"
    },
    "RouteTablePrivateAZ1": {
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {"Fn::Join": ["-", [
              {"Ref": "Environment"},
              "RouteTablePrivateAZ1"
            ]]}
          }
        ]
      },
      "Type": "AWS::EC2::RouteTable"
    },
    "RouteTablePrivateAZ2": {
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {"Fn::Join": ["-", [
              {"Ref": "Environment"},
              "RouteTablePrivateAZ2"
            ]]}
          }
        ]
      },
      "Type": "AWS::EC2::RouteTable"
    },
    "RouteTablePublic": {
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {"Fn::Join": ["-", [
              {"Ref": "Environment"},
              "RouteTablePublic"
            ]]}
          }
        ]
      },
      "Type": "AWS::EC2::RouteTable"
    },
    "VPC": {
      "Properties": {
        "CidrBlock": {
          "Ref": "VPCCidrBlock"
        },
        "EnableDnsHostnames": "true",
        "EnableDnsSupport": "true",
        "InstanceTenancy": {
          "Ref": "Tenancy"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {"Fn::Join": ["-", [
              {"Ref": "Environment"},
              "VPC"
            ]]}
          }
        ]
      },
      "Type": "AWS::EC2::VPC"
    }
  },
  "Outputs": {
    "CIDR": {
      "Export": {
        "Name": {
          "Fn::Join": ["", [{
            "Ref": "AWS::StackName"
          }, "-", "CIDR"]]
        }
      },
      "Value": {
        "Ref": "VPCCidrBlock"
      }
    },
    "EIPNATAZ1": {
      "Export": {
        "Name": {
          "Fn::Join": ["", [{
            "Ref": "AWS::StackName"
          }, "-", "EIPNATAZ1"]]
        }
      },
      "Value": {
        "Ref": "EIPNATAZ1"
      }
    },
    "EIPNATAZ2": {
      "Export": {
        "Name": {
          "Fn::Join": ["", [{
            "Ref": "AWS::StackName"
          }, "-", "EIPNATAZ2"]]
        }
      },
      "Value": {
        "Ref": "EIPNATAZ2"
      }
    },
    "PrivateSubnetAZ1": {
      "Export": {
        "Name": {
          "Fn::Join": ["", [{
            "Ref": "AWS::StackName"
          }, "-", "PrivateSubnetAZ1"]]
        }
      },
      "Value": {
        "Ref": "PrivateSubnetAZ1"
      }
    },
    "PrivateSubnetAZ1AvailabilityZone": {
      "Export": {
        "Name": {
          "Fn::Join": ["", [{
            "Ref": "AWS::StackName"
          }, "-", "PrivateSubnetAZ1AvailabilityZone"]]
        }
      },
      "Value": {
        "Fn::GetAtt": ["PrivateSubnetAZ1", "AvailabilityZone"]
      }
    },
    "PrivateSubnetAZ2AvailabilityZone": {
      "Export": {
        "Name": {
          "Fn::Join": ["", [{
            "Ref": "AWS::StackName"
          }, "-", "PrivateSubnetAZ2AvailabilityZone"]]
        }
      },
      "Value": {
        "Fn::GetAtt": ["PrivateSubnetAZ2", "AvailabilityZone"]
      }
    },
    "PrivateSubnetAZ2": {
      "Export": {
        "Name": {
          "Fn::Join": ["", [{
            "Ref": "AWS::StackName"
          }, "-", "PrivateSubnetAZ2"]]
        }
      },
      "Value": {
        "Ref": "PrivateSubnetAZ2"
      }
    },
    "PublicSubnetAZ1": {
      "Export": {
        "Name": {
          "Fn::Join": ["", [{
            "Ref": "AWS::StackName"
          }, "-", "PublicSubnetAZ1"]]
        }
      },
      "Value": {
        "Ref": "PublicSubnetAZ1"
      }
    },
    "PublicSubnetAZ2": {
      "Export": {
        "Name": {
          "Fn::Join": ["", [{
            "Ref": "AWS::StackName"
          }, "-", "PublicSubnetAZ2"]]
        }
      },
      "Value": {
        "Ref": "PublicSubnetAZ2"
      }
    },
    "RouteTablePrivateAZ1": {
      "Export": {
        "Name": {
          "Fn::Join": ["", [{
            "Ref": "AWS::StackName"
          }, "-", "RouteTablePrivateAZ1"]]
        }
      },
      "Value": {
        "Ref": "RouteTablePrivateAZ1"
      }
    },
    "RouteTablePrivateAZ2": {
      "Export": {
        "Name": {
          "Fn::Join": ["", [{
            "Ref": "AWS::StackName"
          }, "-", "RouteTablePrivateAZ2"]]
        }
      },
      "Value": {
        "Ref": "RouteTablePrivateAZ2"
      }
    },
    "RouteTablePublic": {
      "Export": {
        "Name": {
          "Fn::Join": ["", [{
            "Ref": "AWS::StackName"
          }, "-", "RouteTablePublic"]]
        }
      },
      "Value": {
        "Ref": "RouteTablePublic"
      }
    },
    "VPC": {
      "Export": {
        "Name": {
          "Fn::Join": ["", [{
            "Ref": "AWS::StackName"
          }, "-", "VPC"]]
        }
      },
      "Value": {
        "Ref": "VPC"
      }
    },
    "VPCDefaultSecurityGroup": {
      "Export": {
        "Name": {
          "Fn::Join": ["", [{
            "Ref": "AWS::StackName"
          }, "-", "VPCDefaultSecurityGroup"]]
        }
      },
      "Value": {
        "Fn::GetAtt": ["VPC", "DefaultSecurityGroup"]
      }
    }
  }
}
