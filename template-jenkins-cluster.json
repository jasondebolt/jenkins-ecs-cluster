{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Spins up a highly available Jenkins cluster.",
  "Metadata" : {
    "AWS::CloudFormation::Interface" : {
      "ParameterGroups" : [
        {
          "Label" : { "default" : "Global Configuration" },
          "Parameters" : [
            "Environment"
          ]
        },
        {
          "Label" : { "default" : "Network Configuration" },
          "Parameters" : [
            "VPCCidrBlock",
            "PrivateSubnet1CidrBlock",
            "PrivateSubnet2CidrBlock",
            "PublicSubnet1CidrBlock",
            "PublicSubnet2CidrBlock"
          ]
        },
        {
          "Label" : { "default" : "EC2 Configuration" },
          "Parameters" : [
            "KeyName",
            "InstanceType",
            "AllowedIPRange"
          ]
        },
        {
          "Label" : { "default" : "ECS Cluster & Docker Configuration" },
          "Parameters" : [
            "ClusterName",
            "ImageName"
          ]
        }
      ]
    }
  },
  "Parameters": {
    "Environment": {
      "Description": "The environment (dev, testing, prod, etc.) of the VPC.",
      "Type": "String"
    },
    "VPCCidrBlock": {
      "Type": "String",
      "Description": "The CIDR range for the VPC. Examples include 10.0.0.0/16, 10.1.0.0/16, 10.2.0.0/16, etc. Make sure to use different CIDR ranges for each VPC you create.",
      "Default": "10.0.0.0/16"
    },
    "PrivateSubnet1CidrBlock": {
      "Type": "String",
      "Description": "The CIDR range for the first private subnet. Examples include 10.0.1.0/24, 10.1.1.0/24, 10.2.1.0/24, etc. Make sure the subnet CIDR range is within the same CIDR range as the VPC, and also make sure that the third digit is odd, since it's a private subnet.",
      "Default": "10.0.1.0/24"
    },
    "PrivateSubnet2CidrBlock": {
      "Type": "String",
      "Description": "The CIDR range for the second private subnet. Examples include 10.0.3.0/24, 10.1.3.0/24, 10.2.3.0/24, etc. Make sure the subnet CIDR range is within the same CIDR range as the VPC, and also make sure that the third digit is odd, since it's a private subnet.",
      "Default": "10.0.3.0/24"
    },
    "PublicSubnet1CidrBlock": {
      "Type": "String",
      "Description": "The CIDR range for the first public subnet. Examples include 10.0.2.0/24, 10.1.2.0/24, 10.2.2.0/24, etc. Make sure the subnet CIDR range is within the same CIDR range as the VPC, and also make sure that the third digit is even, since it's a public subnet.",
      "Default": "10.0.2.0/24"
    },
    "PublicSubnet2CidrBlock": {
      "Type": "String",
      "Description": "The CIDR range for the second public subnet. Examples include 10.0.4.0/24, 10.1.4.0/24, 10.2.4.0/24, etc. Make sure the subnet CIDR range is within the same CIDR range as the VPC, and also make sure that the third digit is even, since it's a public subnet.",
      "Default": "10.0.4.0/24"
    },
    "Tenancy": {
      "Type": "String",
      "Description": "Then VPC tenancy",
      "AllowedValues": ["default", "dedicated"],
      "Default": "default"
    },
    "KeyName": {
      "Description": "Optional: the EC2 Key Pair to allow SSH access to the EC2 instances of this stack.",
      "Type": "String",
      "Default": ""
    },
    "InstanceType": {
      "Description": "EC2 instance type",
      "Type": "String",
      "Default": "m5.2xlarge",
      "AllowedValues": [
        "m5.large",
        "m5.xlarge",
        "m5.2xlarge",
        "m5.4xlarge",
        "m5.12xlarge",
        "m5.24xlarge",
        "c5.large",
        "c5.xlarge",
        "c5.2xlarge",
        "c5.4xlarge",
        "c5.9xlarge",
        "c5.18xlarge",
        "c5d.large",
        "c5d.xlarge",
        "c5d.2xlarge",
        "c5d.4xlarge",
        "c5d.9xlarge",
        "c5d.18xlarge",
        "i3.metal"
      ],
      "ConstraintDescription": "Must be a valid EC2 instance type."
    },
    "AllowedIPRange": {
      "Description": "The IP range allowed to access Jenkins over port 22 and port 80",
      "Type": "String",
      "Default": "0.0.0.0/0"
    },
    "ClusterName": {
      "Description": "The lower-case-dash ECS cluster name",
      "Type": "String",
      "Default": "jenkins-cluster"
    },
    "ImageName": {
      "Description": "The docker image to use for Jenkins",
      "Type": "String",
      "Default": "jenk"
    },
    "ImageVersion": {
      "Description": "The version of the ECR Image",
      "Default": "latest",
      "Type": "String"
    }
  },
  "Mappings": {
    "RegionAmazonECSOptimizedAMIMapping": {
      "us-east-2": {
        "AMI": "ami-bb8eaede"
      },
      "us-east-1": {
        "AMI": "ami-d61027ad"
      },
      "us-west-2": {
        "AMI": "ami-c6f81abe"
      },
      "us-west-1": {
        "AMI": "ami-514e6431"
      },
      "eu-west-2": {
        "AMI": "ami-0a85946e"
      },
      "eu-west-1": {
        "AMI": "ami-bd7e8dc4"
      },
      "eu-central-1": {
        "AMI": "ami-f15ff69e"
      },
      "ap-northeast-1": {
        "AMI": "ami-ab5ea9cd"
      },
      "ap-southeast-2": {
        "AMI": "ami-c3233ba0"
      },
      "ap-southeast-1": {
        "AMI": "ami-ae0b91cd"
      },
      "ca-central-1": {
        "AMI": "ami-32bb0556"
      }
    }
  },
  "Conditions": {
    "HasKeyName": {"Fn::Not": [{"Fn::Equals": ["", {"Ref": "KeyName"}]}]}
  },
  "Resources": {
    "ECSJenkinsCluster": {
      "Type": "AWS::ECS::Cluster",
      "Properties": {
        "ClusterName": { "Ref": "ClusterName"}
      }
    },
    "ECSJenkinsMasterTaskDefinition": {
      "Type": "AWS::ECS::TaskDefinition",
      "Properties": {
        "Family": "jenkins-master",
        "NetworkMode": "bridge",
        "ContainerDefinitions": [
          {
            "Name": "jenkins-master",
            "Image": { "Fn::Join" : [ "", [
              {"Fn::Join": ["", [
                {"Ref": "AWS::AccountId"},
                ".dkr.ecr.",
                {"Ref": "AWS::Region"},
                ".amazonaws.com",
              ]]},
              "/",
              { "Ref": "ImageName"},
              ":",
              { "Ref": "ImageVersion" }
              ]]
            },
            "LogConfiguration": {
              "LogDriver":"awslogs",
              "Options": {
                "awslogs-group": {
                  "Ref":"CloudwatchLogsGroup"
                },
                "awslogs-region": {
                  "Ref":"AWS::Region"
                },
                "awslogs-stream-prefix": { "Ref": "ImageName" }
              }
            },
            "MountPoints": [
              {
                "SourceVolume": "data-volume",
                "ContainerPath": "/var/jenkins_home"
              }
            ],
            "Essential": true,
            "Cpu": 1024,
            "MemoryReservation": 992,
            "PortMappings": [
              {
                "HostPort": 8080,
                "ContainerPort": 8080,
                "Protocol": "tcp"
              },
              {
                "HostPort": 50000,
                "ContainerPort": 50000,
                "Protocol": "tcp"
              }
            ]
          }
        ],
        "Volumes": [
          {
            "Host": {
              "SourcePath": "/data/"
            },
            "Name": "data-volume"
          }
        ]
      }
    },
    "CloudwatchLogsGroup":{
      "Type":"AWS::Logs::LogGroup",
      "Properties":{
        "LogGroupName":{
          "Fn::Join":[
            "-",
            [
              "ECSLogGroup",
              {
                "Ref":"AWS::StackName"
              }
            ]
          ]
        }
      }
    },
    "ECSJenkinsService": {
      "DependsOn": ["JenkinsELB"],
      "Type": "AWS::ECS::Service",
      "Properties": {
        "Cluster": { "Ref": "ClusterName" },
        "DesiredCount": 1,
        "ServiceName": "jenkins-master",
        "TaskDefinition": {
          "Ref": "ECSJenkinsMasterTaskDefinition"
        },
        "Role" : { "Ref" : "ECSServiceRole" },
        "LoadBalancers": [
          {
            "LoadBalancerName": {
              "Ref": "JenkinsELB"
            },
            "ContainerPort": "8080",
            "ContainerName": "jenkins-master"
          }
        ]
      }
    },
    "JenkinsClusterScaleUpPolicy": {
      "Type" : "AWS::AutoScaling::ScalingPolicy",
      "Properties" : {
        "AdjustmentType" : "ChangeInCapacity",
        "AutoScalingGroupName" : { "Ref": "JenkinsAutoScalingGroup" },
        "EstimatedInstanceWarmup" : 60,
        "MetricAggregationType" : "Average",
        "PolicyType" : "StepScaling",
        "StepAdjustments" : [ {
          "MetricIntervalLowerBound" : 0,
          "ScalingAdjustment" : 2
        }]
      }
    },
    "JenkinsClusterScaleUpAlarm" : {
      "Type" : "AWS::CloudWatch::Alarm",
      "Properties" : {
        "AlarmDescription" : "CPU utilization peaked at 70% during the last minute",
        "AlarmName" : "JenkinsClusterScaleUpAlarm",
        "AlarmActions": [ { "Ref": "JenkinsClusterScaleUpPolicy" } ],
        "Dimensions" : [{
          "Name": "ClusterName",
          "Value": {"Ref": "ECSJenkinsCluster"}
        }],
        "MetricName" : "CPUReservation",
        "Namespace" : "AWS/ECS",
        "ComparisonOperator" : "GreaterThanOrEqualToThreshold",
        "Statistic" : "Maximum",
        "Threshold" : 70,
        "Period" : 60,
        "EvaluationPeriods": 1,
        "TreatMissingData" : "notBreaching"
      }
    },
    "JenkinsClusterScaleDownPolicy": {
      "Type" : "AWS::AutoScaling::ScalingPolicy",
      "Properties" : {
        "AdjustmentType" : "PercentChangeInCapacity",
        "AutoScalingGroupName" : { "Ref": "JenkinsAutoScalingGroup" },
        "Cooldown"             : "120",
        "ScalingAdjustment"    : "-50"
      }
    },
    "JenkinsClusterScaleDownAlarm" : {
      "Type" : "AWS::CloudWatch::Alarm",
      "Properties" : {
        "AlarmDescription" : "CPU utilization is under 50% for the last 10 min (change 10 min to 45 min for prod use as you pay by the hour )",
        "AlarmName" : "JenkinsClusterScaleDownAlarm",
        "AlarmActions": [ { "Ref": "JenkinsClusterScaleDownPolicy" } ],
        "Dimensions" : [{
          "Name": "ClusterName",
          "Value": {"Ref": "ECSJenkinsCluster"}
        }],
        "MetricName" : "CPUReservation",
        "Namespace" : "AWS/ECS",
        "ComparisonOperator" : "LessThanThreshold",
        "Statistic" : "Maximum",
        "Threshold" : 50,
        "Period" : 600,
        "EvaluationPeriods": 1,
        "TreatMissingData" : "notBreaching"
      }
    },
    "EC2JenkinsSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "SecurityGroup for Jenkins instances: master and slaves",
        "VpcId": {
          "Ref": "VPC"
        },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "CidrIp": {
              "Ref": "AllowedIPRange"
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "8080",
            "ToPort": "8080",
            "CidrIp": {
              "Ref": "VPCCidrBlock"
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "8080",
            "ToPort": "8080",
            "CidrIp": {
              "Ref": "AllowedIPRange"
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "50000",
            "ToPort": "50000",
            "CidrIp": {
              "Ref": "VPCCidrBlock"
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "50000",
            "ToPort": "50000",
            "CidrIp": {
              "Ref": "AllowedIPRange"
            }
          }
        ]
      }
    },
    "ECSServiceRole":{
      "Type":"AWS::IAM::Role",
      "Properties":{
        "AssumeRolePolicyDocument":{
          "Statement":[
            {
              "Effect":"Allow",
              "Principal":{
                "Service":[
                  "ecs.amazonaws.com"
                ]
              },
              "Action":[
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path":"/",
        "Policies":[
          {
            "PolicyName": "ecs-service-role",
            "PolicyDocument":{
              "Statement":[
                {
                  "Effect":"Allow",
                  "Action":[
                    "elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
                    "elasticloadbalancing:DeregisterTargets",
                    "elasticloadbalancing:Describe*",
                    "elasticloadbalancing:RegisterInstancesWithLoadBalancer",
                    "elasticloadbalancing:RegisterTargets",
                    "ec2:Describe*",
                    "ec2:AuthorizeSecurityGroupIngress",
                    "ecr:*"
                  ],
                  "Resource":"*"
                }
              ]
            }
          }
        ]
      }
    },
    "EC2JenkinsLaunchConfiguration": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Properties": {
        "AssociatePublicIpAddress": true,
        "ImageId": {
          "Fn::FindInMap": [
            "RegionAmazonECSOptimizedAMIMapping",
            {
              "Ref": "AWS::Region"
            },
            "AMI"
          ]
        },
        "IamInstanceProfile": {
          "Ref": "EC2JenkinsInstanceProfile"
        },
        "InstanceType": {
          "Ref": "InstanceType"
        },
        "KeyName": {"Fn::If": ["HasKeyName", {"Ref": "KeyName"}, {"Ref": "AWS::NoValue"}]},
        "SecurityGroups": [
          {
            "Ref": "EC2JenkinsSecurityGroup"
          }
        ],
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/xvdcz",
            "Ebs": {
              "VolumeSize": "50",
              "DeleteOnTermination": true
            }
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash\n",
                "echo 'ECS_CLUSTER=",
                {
                  "Ref": "ClusterName"
                },
                "' ",
                " >> /etc/ecs/ecs.config\n",
                "#Mount EFS volume\n",
                "yum install -y nfs-utils\n",
                "EC2_AVAIL_ZONE=`curl -s http://169.254.169.254/latest/meta-data/placement/availability-zone`\n",
                "EC2_REGION=",
                {
                  "Ref": "AWS::Region"
                },
                "\n",
                "EFS_FILE_SYSTEM_ID=",
                {
                  "Ref": "EFSJenkinsFileSystem"
                },
                "\n",
                "EFS_PATH=$EC2_AVAIL_ZONE.$EFS_FILE_SYSTEM_ID.efs.$EC2_REGION.amazonaws.com\n",
                "mkdir /data\n",
                "mount -t nfs4 -o nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2 $EFS_PATH:/ /data\n",
                "#Give ownership to jenkins user\n",
                "chown 1000 /data\n"
              ]
            ]
          }
        }
      }
    },
    "JenkinsAutoScalingGroup": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "VPCZoneIdentifier": [
          {"Ref": "PrivateSubnetAZ1"},
          {"Ref": "PrivateSubnetAZ2"},
        ],
        "LaunchConfigurationName": {
          "Ref": "EC2JenkinsLaunchConfiguration"
        },
        "LoadBalancerNames": [
          {"Ref": "JenkinsELB"}
        ],
        "MinSize": "2",
        "MaxSize": "5",
        "DesiredCapacity": "2",
        "HealthCheckType": "EC2",
        "HealthCheckGracePeriod": "400",
        "Tags": [
          {
            "Key": "Name",
            "Value": "jenkins-ecs-instance",
            "PropagateAtLaunch": "true"
          }
        ]
      }
    },
    "EC2JenkinsInstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [
          {
            "Ref": "EC2Role"
          }
        ]
      }
    },
    "EC2Role":{
      "Type":"AWS::IAM::Role",
      "Properties":{
        "AssumeRolePolicyDocument":{
          "Statement":[
            {
              "Effect":"Allow",
              "Principal":{
                "Service":[
                  "ec2.amazonaws.com"
                ]
              },
              "Action":[
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path":"/",
        "Policies":[
          {
            "PolicyName": "ecs-service",
            "PolicyDocument":{
              "Statement":[
                {
                  "Effect":"Allow",
                  "Action":[
                    "ecs:*",
                    "ecr:*",
                    "elasticloadbalancing:Describe*",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Resource":"*"
                }
              ]
            }
          }
        ]
      }
    },
    "JenkinsELBSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "SecurityGroup for Jenkins ELB",
        "VpcId": {
          "Ref": "VPC"
        },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "80",
            "ToPort": "80",
            "CidrIp": {
              "Ref": "AllowedIPRange"
            }
          }
        ]
      }
    },
    "EFSSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Security group for EFS mount target",
        "VpcId": {
          "Ref": "VPC"
        },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "2049",
            "ToPort": "2049",
            "CidrIp": {
              "Ref": "VPCCidrBlock"
            }
          }
        ]
      }
    },
    "EFSJenkinsFileSystem": {
      "Type": "AWS::EFS::FileSystem",
      "Properties": {
        "FileSystemTags": [
          {
            "Key": "Name",
            "Value": "EFSJenkinsFileSystem"
          }
        ]
      }
    },
    "EFSJenkinsMountTargetAZ1": {
      "Type": "AWS::EFS::MountTarget",
      "Properties": {
        "FileSystemId": {
          "Ref": "EFSJenkinsFileSystem"
        },
        "SubnetId": {
          "Ref": "PrivateSubnetAZ1"
        },
        "SecurityGroups": [
          {
            "Ref": "EFSSecurityGroup"
          }
        ]
      }
    },
    "EFSJenkinsMountTargetAZ2": {
      "Type": "AWS::EFS::MountTarget",
      "Properties": {
        "FileSystemId": {
          "Ref": "EFSJenkinsFileSystem"
        },
        "SubnetId": {
          "Ref": "PrivateSubnetAZ2"
        },
        "SecurityGroups": [
          {
            "Ref": "EFSSecurityGroup"
          }
        ]
      }
    },
    "JenkinsELB": {
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties": {
        "Scheme": "internet-facing",
        "Subnets": [
          {"Ref": "PublicSubnetAZ1"},
          {"Ref": "PublicSubnetAZ2"}
        ],
        "SecurityGroups": [
          {
            "Ref": "JenkinsELBSecurityGroup"
          }
        ],
        "Listeners": [
          {
            "InstancePort": "8080",
            "InstanceProtocol": "HTTP",
            "LoadBalancerPort": "80",
            "Protocol": "HTTP",
            "PolicyNames": [
              "JenkinsELBStickiness"
            ]
          }
        ],
        "LBCookieStickinessPolicy": [
          {
            "CookieExpirationPeriod": "3600",
            "PolicyName": "JenkinsELBStickiness"
          }
        ],
        "HealthCheck": {
          "HealthyThreshold": "3",
          "Interval": "20",
          "Target": "HTTP:8080/login",
          "Timeout": "2",
          "UnhealthyThreshold": "10"
        }
      }
    },
    "EIPNATAZ1": {
      "Type": "AWS::EC2::EIP",
      "Properties": {
        "Domain": "vpc"
      },
      "Type": "AWS::EC2::EIP"
    },
    "EIPNATAZ2": {
      "Properties": {
        "Domain": "vpc"
      },
      "Type": "AWS::EC2::EIP"
    },
    "IGW1": {
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": {"Fn::Join": ["-", [
              {"Ref": "Environment"},
              "IGW1"
            ]]}
          }
        ]
      },
      "Type": "AWS::EC2::InternetGateway"
    },
    "IGW1Attachment": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "InternetGatewayId": {
          "Ref": "IGW1"
        },
        "VpcId": {
          "Ref": "VPC"
        }
      }
    },
    "IGW1AttachmentRoute": {
      "DependsOn": ["IGW1Attachment"],
      "Type": "AWS::EC2::Route",
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "IGW1"
        },
        "RouteTableId": {
          "Ref": "RouteTablePublic"
        }
      }
    },
    "NatAZ1": {
      "DependsOn": "IGW1Attachment",
      "Type": "AWS::EC2::NatGateway",
      "Properties": {
        "AllocationId": {
          "Fn::GetAtt": ["EIPNATAZ1", "AllocationId"]
        },
        "SubnetId": {
          "Ref": "PublicSubnetAZ1"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {"Fn::Join": ["-", [
              {"Ref": "Environment"},
              "NatAZ1"
            ]]}
          }
        ]
      }
    },
    "NatAZ1Route": {
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "NatGatewayId": {
          "Ref": "NatAZ1"
        },
        "RouteTableId": {
          "Ref": "RouteTablePrivateAZ1"
        }
      },
      "Type": "AWS::EC2::Route"
    },
    "NatAZ2": {
      "DependsOn": "IGW1Attachment",
      "Properties": {
        "AllocationId": {
          "Fn::GetAtt": ["EIPNATAZ2", "AllocationId"]
        },
        "SubnetId": {
          "Ref": "PublicSubnetAZ2"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {"Fn::Join": ["-", [
              {"Ref": "Environment"},
              "NatAZ2"
            ]]}
          }
        ]
      },
      "Type": "AWS::EC2::NatGateway"
    },
    "NatAZ2Route": {
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "NatGatewayId": {
          "Ref": "NatAZ2"
        },
        "RouteTableId": {
          "Ref": "RouteTablePrivateAZ2"
        }
      },
      "Type": "AWS::EC2::Route"
    },
    "PrivateSubnetAZ1": {
      "Properties": {
        "AvailabilityZone": {
          "Fn::Select": ["0", {
            "Fn::GetAZs": {
              "Ref": "AWS::Region"
            }
          }]
        },
        "CidrBlock": {
          "Ref": "PrivateSubnet1CidrBlock"
        },
        "MapPublicIpOnLaunch": "false",
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {"Fn::Join": ["-", [
              {"Ref": "Environment"},
              "PrivateSubnetAZ1"
            ]]}
          }
        ]
      },
      "Type": "AWS::EC2::Subnet"
    },
    "PrivateSubnetAZ1RouteTbl": {
      "Properties": {
        "RouteTableId": {
          "Ref": "RouteTablePrivateAZ1"
        },
        "SubnetId": {
          "Ref": "PrivateSubnetAZ1"
        }
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation"
    },
    "PrivateSubnetAZ2": {
      "Properties": {
        "AvailabilityZone": {
          "Fn::Select": ["1", {
            "Fn::GetAZs": {
              "Ref": "AWS::Region"
            }
          }]
        },
        "CidrBlock": {
          "Ref": "PrivateSubnet2CidrBlock"
        },
        "MapPublicIpOnLaunch": "false",
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {"Fn::Join": ["-", [
              {"Ref": "Environment"},
              "PrivateSubnetAZ2"
            ]]}
          }
        ]
      },
      "Type": "AWS::EC2::Subnet"
    },
    "PrivateSubnetAZ2RouteTbl": {
      "Properties": {
        "RouteTableId": {
          "Ref": "RouteTablePrivateAZ2"
        },
        "SubnetId": {
          "Ref": "PrivateSubnetAZ2"
        }
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation"
    },
    "PublicSubnetAZ1": {
      "Properties": {
        "AvailabilityZone": {
          "Fn::Select": ["0", {
            "Fn::GetAZs": {
              "Ref": "AWS::Region"
            }
          }]
        },
        "CidrBlock": {
          "Ref": "PublicSubnet1CidrBlock"
        },
        "MapPublicIpOnLaunch": "true",
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {"Fn::Join": ["-", [
              {"Ref": "Environment"},
              "PublicSubnetAZ1"
            ]]}
          }
        ]
      },
      "Type": "AWS::EC2::Subnet"
    },
    "PublicSubnetAZ1RouteTbl": {
      "Properties": {
        "RouteTableId": {
          "Ref": "RouteTablePublic"
        },
        "SubnetId": {
          "Ref": "PublicSubnetAZ1"
        }
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation"
    },
    "PublicSubnetAZ2": {
      "Properties": {
        "AvailabilityZone": {
          "Fn::Select": ["1", {
            "Fn::GetAZs": {
              "Ref": "AWS::Region"
            }
          }]
        },
        "CidrBlock": {
          "Ref": "PublicSubnet2CidrBlock"
        },
        "MapPublicIpOnLaunch": "true",
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {"Fn::Join": ["-", [
              {"Ref": "Environment"},
              "PublicSubnetAZ2"
            ]]}
          }
        ]
      },
      "Type": "AWS::EC2::Subnet"
    },
    "PublicSubnetAZ2RouteTbl": {
      "Properties": {
        "RouteTableId": {
          "Ref": "RouteTablePublic"
        },
        "SubnetId": {
          "Ref": "PublicSubnetAZ2"
        }
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation"
    },
    "RouteTablePrivateAZ1": {
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {"Fn::Join": ["-", [
              {"Ref": "Environment"},
              "RouteTablePrivateAZ1"
            ]]}
          }
        ]
      },
      "Type": "AWS::EC2::RouteTable"
    },
    "RouteTablePrivateAZ2": {
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {"Fn::Join": ["-", [
              {"Ref": "Environment"},
              "RouteTablePrivateAZ2"
            ]]}
          }
        ]
      },
      "Type": "AWS::EC2::RouteTable"
    },
    "RouteTablePublic": {
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {"Fn::Join": ["-", [
              {"Ref": "Environment"},
              "RouteTablePublic"
            ]]}
          }
        ]
      },
      "Type": "AWS::EC2::RouteTable"
    },
    "VPC": {
      "Properties": {
        "CidrBlock": {
          "Ref": "VPCCidrBlock"
        },
        "EnableDnsHostnames": "true",
        "EnableDnsSupport": "true",
        "InstanceTenancy": {
          "Ref": "Tenancy"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {"Fn::Join": ["-", [
              {"Ref": "Environment"},
              "VPC"
            ]]}
          }
        ]
      },
      "Type": "AWS::EC2::VPC"
    }
  },
  "Outputs": {
    "JenkinsELB" : {
      "Description": "Jenkins URL",
      "Value" : {"Fn::Join": ["", ["http://", { "Fn::GetAtt" : [ "JenkinsELB", "DNSName" ]}] ]}
    },
    "CIDR": {
      "Export": {
        "Name": {
          "Fn::Join": ["", [{
            "Ref": "AWS::StackName"
          }, "-", "CIDR"]]
        }
      },
      "Value": {
        "Ref": "VPCCidrBlock"
      }
    },
    "EIPNATAZ1": {
      "Export": {
        "Name": {
          "Fn::Join": ["", [{
            "Ref": "AWS::StackName"
          }, "-", "EIPNATAZ1"]]
        }
      },
      "Value": {
        "Ref": "EIPNATAZ1"
      }
    },
    "EIPNATAZ2": {
      "Export": {
        "Name": {
          "Fn::Join": ["", [{
            "Ref": "AWS::StackName"
          }, "-", "EIPNATAZ2"]]
        }
      },
      "Value": {
        "Ref": "EIPNATAZ2"
      }
    },
    "PrivateSubnetAZ1": {
      "Export": {
        "Name": {
          "Fn::Join": ["", [{
            "Ref": "AWS::StackName"
          }, "-", "PrivateSubnetAZ1"]]
        }
      },
      "Value": {
        "Ref": "PrivateSubnetAZ1"
      }
    },
    "PrivateSubnetAZ1AvailabilityZone": {
      "Export": {
        "Name": {
          "Fn::Join": ["", [{
            "Ref": "AWS::StackName"
          }, "-", "PrivateSubnetAZ1AvailabilityZone"]]
        }
      },
      "Value": {
        "Fn::GetAtt": ["PrivateSubnetAZ1", "AvailabilityZone"]
      }
    },
    "PrivateSubnetAZ2AvailabilityZone": {
      "Export": {
        "Name": {
          "Fn::Join": ["", [{
            "Ref": "AWS::StackName"
          }, "-", "PrivateSubnetAZ2AvailabilityZone"]]
        }
      },
      "Value": {
        "Fn::GetAtt": ["PrivateSubnetAZ2", "AvailabilityZone"]
      }
    },
    "PrivateSubnetAZ2": {
      "Export": {
        "Name": {
          "Fn::Join": ["", [{
            "Ref": "AWS::StackName"
          }, "-", "PrivateSubnetAZ2"]]
        }
      },
      "Value": {
        "Ref": "PrivateSubnetAZ2"
      }
    },
    "PublicSubnetAZ1": {
      "Export": {
        "Name": {
          "Fn::Join": ["", [{
            "Ref": "AWS::StackName"
          }, "-", "PublicSubnetAZ1"]]
        }
      },
      "Value": {
        "Ref": "PublicSubnetAZ1"
      }
    },
    "PublicSubnetAZ2": {
      "Export": {
        "Name": {
          "Fn::Join": ["", [{
            "Ref": "AWS::StackName"
          }, "-", "PublicSubnetAZ2"]]
        }
      },
      "Value": {
        "Ref": "PublicSubnetAZ2"
      }
    },
    "RouteTablePrivateAZ1": {
      "Export": {
        "Name": {
          "Fn::Join": ["", [{
            "Ref": "AWS::StackName"
          }, "-", "RouteTablePrivateAZ1"]]
        }
      },
      "Value": {
        "Ref": "RouteTablePrivateAZ1"
      }
    },
    "RouteTablePrivateAZ2": {
      "Export": {
        "Name": {
          "Fn::Join": ["", [{
            "Ref": "AWS::StackName"
          }, "-", "RouteTablePrivateAZ2"]]
        }
      },
      "Value": {
        "Ref": "RouteTablePrivateAZ2"
      }
    },
    "RouteTablePublic": {
      "Export": {
        "Name": {
          "Fn::Join": ["", [{
            "Ref": "AWS::StackName"
          }, "-", "RouteTablePublic"]]
        }
      },
      "Value": {
        "Ref": "RouteTablePublic"
      }
    },
    "VPC": {
      "Export": {
        "Name": {
          "Fn::Join": ["", [{
            "Ref": "AWS::StackName"
          }, "-", "VPC"]]
        }
      },
      "Value": {
        "Ref": "VPC"
      }
    },
    "VPCDefaultSecurityGroup": {
      "Export": {
        "Name": {
          "Fn::Join": ["", [{
            "Ref": "AWS::StackName"
          }, "-", "VPCDefaultSecurityGroup"]]
        }
      },
      "Value": {
        "Fn::GetAtt": ["VPC", "DefaultSecurityGroup"]
      }
    }
  }
}
