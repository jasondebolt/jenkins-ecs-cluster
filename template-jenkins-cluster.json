{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description" : "Generates all resources required for a single container ECS service.",
  "Parameters": {
    "ProjectName": {
      "Description": "The name of your project.",
      "MinLength": "1",
      "MaxLength": "20",
      "AllowedPattern": "^[a-z]+[\\-a-z0-9]*[a-z0-9]+",
      "ConstraintDescription": "User all lowercase, dashes, or numbers (demo-project) between 1 and 20 characters in length. Must not start with a number, and must not start or end with a dash.",
      "Type": "String",
      "Default": "jenkins"
    },
    "Environment": {
      "Description": "The environment to deploy the instance to.",
      "Type": "String",
      "Default": "devops"
    },
    "IpWhitelist": {
      "Description": "The IP CIDR range that can access the ELB on port 443. (i.e 42.52.12.67/32).",
      "Type": "String"
    },
    "Domain": {
      "Description": "The domain name that this service will fall under.",
      "Type": "String",
      "Default": "enter-your-domain-here.com"
    },
    "MasterClusterName": {
      "Description": "The name of the ECS Jenkins master cluster",
      "Type": "String",
      "Default": "jenkins-master-cluster"
    },
    "SlaveClusterName": {
      "Description": "The name of the ECS Jenkins slave cluster",
      "Type": "String",
      "Default": "jenkins-slave-cluster"
    },
    "SSLCertificateARN": {
      "Description": "The AWS ACM Certificate ARN.",
      "Type": "String",
      "Default": "arn:aws:acm:{your-aws-region}:{your-aws-account-id}:certificate/{your-certificate-id}"
    },
    "HostedZoneId": {
      "Description": "The Route53 hosted zone id that this service will fall under.",
      "Type": "String",
      "Default": "i.e Z26KY8AGSSM28M"
    },
    "KeyPairName":{
      "Type":"AWS::EC2::KeyPair::KeyName",
      "Description":"Name of an existing EC2 KeyPair to enable SSH access to the ECS instances. Do not include the '.pem' extension.",
      "Default": ""
    },
    "JenkinsMasterNetworkMode": {
      "Description": "The Docker networking mode to use for the containers in the task, such as none, bridge, or host. For Fargate launch types, you can specify awsvpc only. The none, bridge, or host option won't work for Fargate launch types.",
      "Type": "String",
      "Default": "awsvpc"
    },
    "JenkinsMasterTaskCpu": {
      "Description": "The number of cpu units used by the task. If you are using the Fargate launch type, this field is required. {Cpu: (Allowed Memory), ...} --> {256: (0.5GB, 1GB, 2GB), 512: (1GB, 2GB, 3GB, 4GB), 1024: (2GB, 3GB, 4GB, 5GB, 6GB, 7GB, 8GB), 2048: (Between 4GB and 16GB in 1GB increments), 4096: (Between 8GB and 30GB in 1GB increments) See https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-taskdefinition.html",
      "AllowedValues": ["", "256", "512", "1024", "2048", "4096"],
      "Type": "String",
      "Default": ""
    },
    "JenkinsMasterTaskMemory": {
      "Description": "The amount (in MiB) of memory used by the task. If you are using the Fargate launch type, this field is required and you must use one of the following values, which determines your range of valid values for the cpu parameter. {Cpu: (Allowed Memory), ...} --> {256: (0.5GB, 1GB, 2GB), 512: (1GB, 2GB, 3GB, 4GB), 1024: (2GB, 3GB, 4GB, 5GB, 6GB, 7GB, 8GB), 2048: (Between 4GB and 16GB in 1GB increments), 4096: (Between 8GB and 30GB in 1GB increments) See https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-taskdefinition.html",
      "AllowedValues": ["", "0.5GB", "1GB", "2GB", "3GB", "4GB", "5GB", "6GB", "7GB", "8GB", "9GB", "10GB", "11GB", "12GB", "13GB", "14GB", "15GB", "16GB", "17GB", "18GB", "19GB", "20GB", "21GB", "22GB", "23GB", "24GB", "25GB", "26GB", "27GB", "28GB", "29GB", "30GB"],
      "Type": "String",
      "Default": ""
    },
    "JenkinsMasterContainerCpu": {
      "Description": "Optional. The minimum number of CPU units to reserve for the container. Containers share unallocated CPU units with other containers on the instance by using the same ratio as their allocated CPU units.",
      "Type": "String",
      "Default": ""
    },
    "JenkinsMasterContainerMemory": {
      "Description": "Conditionally required. The number of MiB of memory to reserve for the container. If your container attempts to exceed the allocated memory, the container is terminated. You must specify one or both of the Memory or MemoryReservation properties. If you specify both, the value for the Memory property must be greater than the value of the MemoryReservation property.",
      "Type": "String",
      "Default": ""
    },
    "JenkinsMasterMemoryReservation": {
      "Description": "Optional. The number of MiB of memory to reserve for the container. When system memory is under contention, Docker attempts to keep the container memory within the limit. If the container requires more memory, it can consume up to the value specified by the Memory property or all of the available memory on the container instance—whichever comes first. This is called a soft limit.",
      "Type": "String",
      "Default": "30000"
    },
    "JenkinsSlaveTaskCpu": {
      "Description": "The number of cpu units used by the task. If you are using the Fargate launch type, this field is required. {Cpu: (Allowed Memory), ...} --> {256: (0.5GB, 1GB, 2GB), 512: (1GB, 2GB, 3GB, 4GB), 1024: (2GB, 3GB, 4GB, 5GB, 6GB, 7GB, 8GB), 2048: (Between 4GB and 16GB in 1GB increments), 4096: (Between 8GB and 30GB in 1GB increments) See https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-taskdefinition.html",
      "AllowedValues": ["", "256", "512", "1024", "2048", "4096"],
      "Type": "String",
      "Default": ""
    },
    "JenkinsSlaveTaskMemory": {
      "Description": "The amount (in MiB) of memory used by the task. If you are using the Fargate launch type, this field is required and you must use one of the following values, which determines your range of valid values for the cpu parameter. {Cpu: (Allowed Memory), ...} --> {256: (0.5GB, 1GB, 2GB), 512: (1GB, 2GB, 3GB, 4GB), 1024: (2GB, 3GB, 4GB, 5GB, 6GB, 7GB, 8GB), 2048: (Between 4GB and 16GB in 1GB increments), 4096: (Between 8GB and 30GB in 1GB increments) See https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-taskdefinition.html",
      "AllowedValues": ["", "0.5GB", "1GB", "2GB", "3GB", "4GB", "5GB", "6GB", "7GB", "8GB", "9GB", "10GB", "11GB", "12GB", "13GB", "14GB", "15GB", "16GB", "17GB", "18GB", "19GB", "20GB", "21GB", "22GB", "23GB", "24GB", "25GB", "26GB", "27GB", "28GB", "29GB", "30GB"],
      "Type": "String",
      "Default": ""
    },
    "JenkinsSlaveContainerCpu": {
      "Description": "Optional. The minimum number of CPU units to reserve for the container. Containers share unallocated CPU units with other containers on the instance by using the same ratio as their allocated CPU units.",
      "Type": "String",
      "Default": ""
    },
    "JenkinsSlaveContainerMemory": {
      "Description": "Conditionally required. The number of MiB of memory to reserve for the container. If your container attempts to exceed the allocated memory, the container is terminated. You must specify one or both of the Memory or MemoryReservation properties. If you specify both, the value for the Memory property must be greater than the value of the MemoryReservation property.",
      "Type": "String",
      "Default": ""
    },
    "JenkinsSlaveMemoryReservation": {
      "Description": "Optional. The number of MiB of memory to reserve for the container. When system memory is under contention, Docker attempts to keep the container memory within the limit. If the container requires more memory, it can consume up to the value specified by the Memory property or all of the available memory on the container instance—whichever comes first. This is called a soft limit.",
      "Type": "String",
      "Default": "992"
    },
    "MasterTaskEssential": {
      "Description": "Indicates whether the task stops if this container fails. If you specify true and the container fails, all other containers in the task stop. If you specify false and the container fails, none of the other containers in the task is affected. This value is true by default.",
      "AllowedValues": ["true", "false"],
      "Type": "String",
      "Default": "true"
    },
    "SlaveTaskEssential": {
      "Description": "Indicates whether the task stops if this container fails. If you specify true and the container fails, all other containers in the task stop. If you specify false and the container fails, none of the other containers in the task is affected. This value is true by default.",
      "AllowedValues": ["true", "false"],
      "Type": "String",
      "Default": "true"
    },
    "MasterImageName": {
      "Description": "The short name of the Jenkins master ECR Image",
      "Type": "String",
      "Default": "jenkins-master"
    },
    "SlaveImageName": {
      "Description": "The short name of the Jenkins slave docker Image",
      "Type": "String",
      "Default": "cloudbees/jnlp-slave-with-java-build-tools"
    },
    "MasterImageVersion": {
      "Description": "The version of the ECR Image",
      "Type": "String",
      "Default": "latest"
    },
    "LaunchType": {
      "Description": "ECS Launch Type. This template has not yet been tested with the Fargate launch type and may need slight modification.",
      "AllowedValues": ["FARGATE", "EC2"],
      "Type": "String",
      "Default": "EC2"
    },
    "MaximumPercent": {
      "Description": "The maximum number of tasks, specified as a percentage of the Amazon ECS service's DesiredCount value, that can run in a service during a deployment",
      "Type": "Number",
      "Default": "200"
    },
    "MinimumHealthyPercent": {
      "Description": "The minimum number of tasks, specified as a percentage of the Amazon ECS service's DesiredJenkinsMasterTaskCount value, that must continue to run and remain healthy during a deployment",
      "Type": "Number",
      "Default": "50"
    },
    "DesiredJenkinsMasterTaskCount": {
      "Description": "Jenkins master tasks within the Jenkins ECS service. Leave this at 1 or else you will get a new Jenkins instance per page refresh, which would lead to strange behavior. If you create a different URL for each jenkins master container, this value could be > 1.",
      "Type": "Number",
      "Default": "1"
    },
    "HealthCheckGracePeriodSeconds": {
      "Description": "The period of time, in seconds, that the Amazon ECS service scheduler ignores unhealthy Elastic Load Balancing target health checks after a task has first started.",
      "Type": "Number",
      "Default": "400"
    },
    "ContainerPort": {
      "Description": "The port number on the container to direct load balancer traffic to. Your container instances must allow ingress traffic on this port.",
      "Type": "Number",
      "Default": "8080"
    },
    "SlavePort": {
      "Description": "The listen port for Jenkins JNLP slaves.",
      "Type": "Number",
      "Default": "50000"
    },
    "AssignPublicIp": {
      "Description": "Whether to assign a public IP.",
      "AllowedValues": ["ENABLED", "DISABLED"],
      "Type": "String",
      "Default": "ENABLED"
    },
    "PlacementConstraintsType": {
      "Description": "Optional. To ensure that each task in a particular group is running on a different container instance, use distinctInstance. To restrict the selection to a group of valid candidates, use memberOf. distinctInstance is not supported in task definitions.",
      "AllowedValues": ["distinctInstance", "memberOf", ""],
      "Type": "String",
      "Default": ""
    },
    "PlacementConstraintsExpression": {
      "Description": "Totally optional, even if you specify a PlacementConstraintsType. A cluster query language expression to apply to the constraint. If the constraint type is distinctInstance, you can't specify an expression. See https://docs.aws.amazon.com/AmazonECS/latest/developerguide/cluster-query-language.html.",
      "Type": "String",
      "Default": ""
    },
    "PlacementStrategiesType": {
      "Description": "Optional. The type of placement strategy. The random placement strategy randomly places tasks on available candidates. The spread placement strategy spreads placement across available candidates evenly based on the field parameter. The binpack strategy places tasks on available candidates that have the least available amount of the resource that is specified with the field parameter. For example, if you binpack on memory, a task is placed on the instance with the least amount of remaining memory (but still enough to run the task",
      "AllowedValues": ["random", "spread", "binpack", ""],
      "Type": "String",
      "Default": ""
    },
    "PlacementStrategiesField": {
      "Description": "Optional only if PlacementStrategiesType is blank or random. The field to apply the placement strategy against. For the spread placement strategy, valid values are instanceId (or host, which has the same effect), or any platform or custom attribute that is applied to a container instance, such as attribute:ecs.availability-zone. For the binpack placement strategy, valid values are cpu and memory. For the random placement strategy, this field is not used.",
      "Type": "String",
      "Default": ""
    },
    "PlatformVersion": {
      "Description": "The platform version on which to run your service. If one is not specified, the latest version will be used by default.",
      "AllowedValues": ["LATEST", "1.0.0"],
      "Type": "String",
      "Default": "LATEST"
    },
    "WebSubnets": {
      "Description": "The type of subnets to place this web service in.",
      "AllowedValues": ["Public", "Private"],
      "Type": "String",
      "Default": "Private"
    },
    "ELBSubnets": {
      "Description": "The type of subnets to place the ELB for this service in.",
      "AllowedValues": ["Public", "Private"],
      "Type": "String",
      "Default": "Public"
    },
    "VPCPrefix": {
      "Description": "The 'export' name prefix of the cloudformation stack for the VPC used by this service.",
      "Type": "String",
      "Default": "devops"
    },
    "DesiredMasterECSInstances": {
      "Type":"Number",
      "Description":"Number of Jenkins master ECS instances to launch in your ECS cluster for this service. Your instance may be shared with other services in the cluster.",
      "Default":"1",
    },
    "MinMasterECSInstances": {
      "Type":"Number",
      "Description":"Minimum number of Jenkins master ECS instances that can be launched in your ECS cluster. Your instance may be shared with other services in the cluster.",
      "Default":"1"
    },
    "MaxMasterECSInstances": {
      "Type":"Number",
      "Description":"Maximum number of Jenkins master ECS instances that can be launched in your ECS cluster. Your instance may be shared with other services in the cluster.",
      "Default":"1"
    },
    "DesiredSlaveECSInstances": {
      "Type":"Number",
      "Description":"Number of Jenkins slave ECS instances to launch in your ECS cluster for this service. Your instance may be shared with other services in the cluster.",
      "Default":"2",
    },
    "MinSlaveECSInstances": {
      "Type":"Number",
      "Description":"Minimum number of Jenkins slave ECS instances that can be launched in your ECS cluster. Your instance may be shared with other services in the cluster.",
      "Default":"1"
    },
    "MaxSlaveECSInstances": {
      "Type":"Number",
      "Description":"Maximum number of Jenkins slave ECS instances that can be launched in your ECS cluster. Your instance may be shared with other services in the cluster.",
      "Default":"6"
    },
    "ContainerLogsRetentionDays": {
      "Type":"Number",
      "Description":"Number of days to retain container logs for",
      "Default": 14
    },
    "InstanceType": {
      "Description":"EC2 instance type",
      "Type":"String",
      "Default":"t2.2xlarge",
      "AllowedValues":[
        "t2.micro",
        "t2.small",
        "t2.medium",
        "t2.large",
        "t2.xlarge",
        "t2.2xlarge",
        "m5.large",
        "m5.xlarge",
        "m5.2xlarge",
        "m5.4xlarge",
        "m5.12xlarge",
        "m5.24xlarge",
        "c5.large",
        "c5.xlarge",
        "c5.2xlarge",
        "c5.4xlarge",
        "c5.9xlarge",
        "c5.18xlarge",
        "c5d.large",
        "c5d.xlarge",
        "c5d.2xlarge",
        "c5d.4xlarge",
        "c5d.9xlarge",
        "c5d.18xlarge",
        "i3.metal"
      ],
      "ConstraintDescription":"Reserved instances. Please choose a valid instance type from our reserved instance types."
    }
  },
  "Mappings":{
    "RegionalConfigs":{
      "us-east-1":{
        "AMI":"ami-aff65ad2",
      },
      "us-east-2":{
        "AMI":"ami-64300001",
      },
      "us-west-1":{
        "AMI":"ami-69677709",
      },
      "us-west-2":{
        "AMI":"ami-40ddb938",
      },
      "eu-west-1":{
        "AMI":"ami-2d386654",
      },
      "eu-central-1":{
        "AMI":"ami-9fc39c74",
      },
      "ap-northeast-1":{
        "AMI":"ami-a99d8ad5",
      },
      "ap-southeast-1":{
        "AMI":"ami-846144f8",
      },
      "ap-southeast-2":{
        "AMI":"ami-efda148d",
      }
    }
  },
  "Conditions": {
    "IsFargate" : {"Fn::Equals" : [
      {"Ref" : "LaunchType"}, "FARGATE"
    ]},
    "IsInternalELB": {"Fn::Equals": [
      {"Ref": "ELBSubnets"}, "Private"
    ]},
    "IsProd" : {"Fn::Equals" : [
      {"Ref" : "Environment"},
      "prod"
    ]},
    "HasJenkinsMasterTaskMemory" : {"Fn::Not": [
      {"Fn::Equals" : [
        {"Ref" : "JenkinsMasterTaskMemory"}, ""
      ]}
    ]},
    "HasJenkinsMasterTaskCpu" : {"Fn::Not": [
      {"Fn::Equals" : [
        {"Ref" : "JenkinsMasterTaskCpu"}, ""
      ]}
    ]},
    "HasJenkinsMasterContainerMemory" : {"Fn::Not": [
      {"Fn::Equals" : [
        {"Ref" : "JenkinsMasterContainerMemory"}, ""
      ]}
    ]},
    "HasJenkinsMasterContainerCpu" : {"Fn::Not": [
      {"Fn::Equals" : [
        {"Ref" : "JenkinsMasterContainerCpu"}, ""
      ]}
    ]},
    "HasJenkinsMasterMemoryReservation" : {"Fn::Not": [
      {"Fn::Equals" : [
        {"Ref" : "JenkinsMasterMemoryReservation"}, ""
      ]}
    ]},
    "HasJenkinsSlaveTaskMemory" : {"Fn::Not": [
      {"Fn::Equals" : [
        {"Ref" : "JenkinsSlaveTaskMemory"}, ""
      ]}
    ]},
    "HasJenkinsSlaveTaskCpu" : {"Fn::Not": [
      {"Fn::Equals" : [
        {"Ref" : "JenkinsSlaveTaskCpu"}, ""
      ]}
    ]},
    "HasJenkinsSlaveContainerMemory" : {"Fn::Not": [
      {"Fn::Equals" : [
        {"Ref" : "JenkinsSlaveContainerMemory"}, ""
      ]}
    ]},
    "HasJenkinsSlaveContainerCpu" : {"Fn::Not": [
      {"Fn::Equals" : [
        {"Ref" : "JenkinsSlaveContainerCpu"}, ""
      ]}
    ]},
    "HasJenkinsSlaveMemoryReservation" : {"Fn::Not": [
      {"Fn::Equals" : [
        {"Ref" : "JenkinsSlaveMemoryReservation"}, ""
      ]}
    ]},
    "HasPlacementConstraints" : {"Fn::Not": [
      {"Fn::Equals" : [
        {"Ref" : "PlacementConstraintsType"}, ""
      ]}
    ]},
    "HasPlacementConstraintsExpression" : {"Fn::Not": [
      {"Fn::Equals" : [
        {"Ref" : "PlacementConstraintsExpression"}, ""
      ]}
    ]},
    "HasPlacementStrategies" : {"Fn::Not": [
      {"Fn::Equals" : [
        {"Ref" : "PlacementStrategiesType"}, ""
      ]}
    ]}
  },
  "Resources": {
    "MasterCluster": {
      "Type": "AWS::ECS::Cluster",
      "Properties" : {
        "ClusterName" : {"Ref": "MasterClusterName"}
      }
    },
    "SlaveCluster": {
      "Type": "AWS::ECS::Cluster",
      "Properties" : {
        "ClusterName" : {"Ref": "SlaveClusterName"}
      }
    },
    "JenkinsScaleUpPolicy": {
      "Type" : "AWS::AutoScaling::ScalingPolicy",
      "Properties" : {
        "AdjustmentType" : "PercentChangeInCapacity",
        "AutoScalingGroupName" : { "Ref": "ECSSlaveAutoScalingGroup" },
        "Cooldown"             : "60",
        "ScalingAdjustment"    : "50"
      }
    },
    "JenkinsScaleUpAlarm": {
       "Type": "AWS::CloudWatch::Alarm",
       "Properties": {
          "AlarmDescription": "Scale-up if CPU is greater than 40% for 2 minutes",
          "AlarmName" : {
            "Fn::Join":[
              "-",
              [
                "JenkinsScaleUpAlarm",
                {
                  "Ref":"AWS::StackName"
                }
              ]
            ]
          },
          "MetricName": "CPUUtilization",
          "Namespace": "AWS/ECS",
          "Statistic": "Maximum",
          "Period": "60",
          "EvaluationPeriods": "1",
          "Threshold": "5",
          "AlarmActions": [ { "Ref": "JenkinsScaleUpPolicy" } ],
          "Dimensions": [
             {
                "Name": "ClusterName",
                "Value": { "Ref": "SlaveCluster" }
             }
          ],
          "ComparisonOperator": "GreaterThanThreshold"
       }
    },
    "JenkinsScaleDownAlarm": {
       "Type": "AWS::CloudWatch::Alarm",
       "Properties": {
          "AlarmDescription": "Scale-down if CPU is less than 10% for 4 minutes",
          "AlarmName" : {
            "Fn::Join":[
              "-",
              [
                "JenkinsScaleDownAlarm",
                {
                  "Ref":"AWS::StackName"
                }
              ]
            ]
          },
          "MetricName": "CPUUtilization",
          "Namespace": "AWS/ECS",
          "Statistic": "Average",
          "Period": "600",
          "EvaluationPeriods": "2",
          "Threshold": "5",
          "AlarmActions": [ { "Ref": "JenkinsScaleDownPolicy" } ],
          "Dimensions": [
             {
                "Name": "ClusterName",
                "Value": { "Ref": "SlaveCluster" }
             }
          ],
          "ComparisonOperator": "LessThanThreshold"
       }
    },
    "JenkinsScaleDownPolicy": {
      "Type" : "AWS::AutoScaling::ScalingPolicy",
      "Properties" : {
        "AdjustmentType" : "PercentChangeInCapacity",
        "AutoScalingGroupName" : { "Ref": "ECSSlaveAutoScalingGroup" },
        "Cooldown"             : "120",
        "ScalingAdjustment"    : "-50"
      }
    },
    "EFSSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Security group for EFS mount target",
        "VpcId": {
          "Fn::ImportValue": {"Fn::Sub": [
            "${VPCPrefix}-vpc-VPC", {"VPCPrefix": {"Ref": "VPCPrefix"}}
          ]}
        }
      }
    },
    "EFSJenkinsFileSystem": {
      "Type": "AWS::EFS::FileSystem",
      "Properties": {
        "FileSystemTags": [
          {
            "Key": "Name",
            "Value": "EFSJenkinsFileSystem"
          }
        ]
      }
    },
    "EFSJenkinsMountTargetAZ1": {
      "Type": "AWS::EFS::MountTarget",
      "Properties": {
        "FileSystemId": {
          "Ref": "EFSJenkinsFileSystem"
        },
        "SubnetId": {
          "Fn::ImportValue": { "Fn::Sub": [
            "${VPCPrefix}-vpc-${PublicOrPrivate}SubnetAZ1", {
              "VPCPrefix": {"Ref": "VPCPrefix"},
              "PublicOrPrivate": {"Ref": "WebSubnets"}
            }
          ]}
        },
        "SecurityGroups": [
          {
            "Ref": "EFSSecurityGroup"
          }
        ]
      }
    },
    "EFSJenkinsMountTargetAZ2": {
      "Type": "AWS::EFS::MountTarget",
      "Properties": {
        "FileSystemId": {
          "Ref": "EFSJenkinsFileSystem"
        },
        "SubnetId": {
          "Fn::ImportValue": { "Fn::Sub": [
            "${VPCPrefix}-vpc-${PublicOrPrivate}SubnetAZ2", {
              "VPCPrefix": {"Ref": "VPCPrefix"},
              "PublicOrPrivate": {"Ref": "WebSubnets"}
            }
          ]}
        },
        "SecurityGroups": [
          {
            "Ref": "EFSSecurityGroup"
          }
        ]
      }
    },
    "CloudwatchLogsGroup":{
      "Type":"AWS::Logs::LogGroup",
      "Properties":{
        "LogGroupName":{
          "Fn::Join":[
            "-",
            [
              "ECSLogGroup",
              {
                "Ref":"AWS::StackName"
              }
            ]
          ]
        },
        "RetentionInDays": {"Ref": "ContainerLogsRetentionDays"}
      }
    },
    "CloudwatchLogsGroupBuildSlaves":{
      "Type":"AWS::Logs::LogGroup",
      "Properties":{
        "LogGroupName":{
          "Fn::Join":[
            "-",
            [
              "BuildSlaves",
              {
                "Ref":"AWS::StackName"
              }
            ]
          ]
        },
        "RetentionInDays": {"Ref": "ContainerLogsRetentionDays"}
      }
    },
    "TaskExecutionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2008-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "ecs-tasks.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy"
        ],
        "RoleName": {"Fn::Join": ["-", [
          {"Ref": "ProjectName"},
          {"Ref": "Environment"},
          "ecs-task-exec"
        ]]}
      }
    },
    "ECSMasterTaskDefinition": {
      "Type": "AWS::ECS::TaskDefinition",
      "DependsOn": ["TaskExecutionRole", "ApplicationELB"],
      "Properties": {
        "RequiresCompatibilities": [
          { "Ref": "LaunchType" }
        ],
        "NetworkMode": { "Ref": "JenkinsMasterNetworkMode" },
        "Cpu": {
          "Fn::If" : [
            "HasJenkinsMasterTaskCpu",
            {"Ref": "JenkinsMasterTaskCpu"},
            {"Ref" : "AWS::NoValue"}
          ]
        },
        "Memory": {
          "Fn::If" : [
            "HasJenkinsMasterTaskMemory",
            {"Ref": "JenkinsMasterTaskMemory"},
            {"Ref" : "AWS::NoValue"}
          ]
        },
        "ExecutionRoleArn": {
          "Fn::GetAtt": ["TaskExecutionRole", "Arn"]
        },
        "Family": {"Ref": "MasterImageName"},
        "ContainerDefinitions": [
          {
            "Name": {"Ref": "MasterImageName"},
            "Environment": [
              {
                "Name": "AWS_ACCOUNT_ID",
                "Value": { "Ref" : "AWS::AccountId" }
              },
              {
                "Name": "AWS_REGION",
                "Value": { "Ref" : "AWS::Region" }
              },
              {
                "Name": "ECS_CLUSTER",
                "Value": {"Ref": "SlaveCluster"}
              },
              {
                "Name": "SLAVE_TASK_DEFINITION_ARN",
                "Value": {"Ref": "ECSSlaveTaskDefinition"}
              },
              {
                "Name": "SECURITY_GROUP",
                "Value": {"Ref": "WebSG"}
              },
              {
                "Name": "SUBNETS",
                "Value": {"Fn::Join": [",", [
                  {"Fn::ImportValue": { "Fn::Sub": [
                    "${VPCPrefix}-vpc-${PublicOrPrivate}SubnetAZ1", {
                      "VPCPrefix": {"Ref": "VPCPrefix"},
                      "PublicOrPrivate": {"Ref": "WebSubnets"}
                    }]
                  }},
                  {"Fn::ImportValue": { "Fn::Sub": [
                    "${VPCPrefix}-vpc-${PublicOrPrivate}SubnetAZ2", {
                      "VPCPrefix": {"Ref": "VPCPrefix"},
                      "PublicOrPrivate": {"Ref": "WebSubnets"}
                    }]
                  }}
                ]]}
              },
              {
                "Name": "ECS_CLUSTER_ARN",
                "Value": {
                  "Fn::GetAtt": [
                    "SlaveCluster",
                    "Arn"
                  ]
                }
              },
              {
                "Name": "ELB_NAME",
                "Value": {
                  "Fn::GetAtt": [
                    "ApplicationELB",
                    "LoadBalancerName"
                  ]
                }
              },
              {
                "Name": "BUILD_SLAVES_LOG_GROUP",
                "Value": { "Ref" : "CloudwatchLogsGroupBuildSlaves"}
              }
            ],
            "Image": { "Fn::Join" : [ "", [
              {"Fn::Join": ["", [
                {"Ref": "AWS::AccountId"},
                ".dkr.ecr.",
                {"Ref": "AWS::Region"},
                ".amazonaws.com"
              ]]},
              "/",
              { "Ref": "MasterImageName"},
              ":",
              { "Ref": "MasterImageVersion" }
              ]]
            },
            "Cpu": {
              "Fn::If" : [
                "HasJenkinsMasterContainerCpu",
                {"Ref": "JenkinsMasterContainerCpu"},
                {"Ref" : "AWS::NoValue"}
              ]
            },
            "Memory": {
              "Fn::If" : [
                "HasJenkinsMasterContainerMemory",
                {"Ref": "JenkinsMasterContainerMemory"},
                {"Ref" : "AWS::NoValue"}
              ]
            },
            "MemoryReservation": {
              "Fn::If" : [
                "HasJenkinsMasterMemoryReservation",
                {"Ref": "JenkinsMasterMemoryReservation"},
                {"Ref" : "AWS::NoValue"}
              ]
            },
            "LogConfiguration": {
              "LogDriver":"awslogs",
              "Options": {
                "awslogs-group": {
                  "Ref":"CloudwatchLogsGroup"
                },
                "awslogs-region": {
                  "Ref":"AWS::Region"
                },
                "awslogs-stream-prefix": {"Ref": "MasterImageName"}
              }
            },
            "PortMappings": [
              {
                "HostPort": {"Ref": "ContainerPort"},
                "ContainerPort": {"Ref": "ContainerPort"},
                "Protocol": "tcp"
              },
              {
                "HostPort": {"Ref": "SlavePort"},
                "ContainerPort": {"Ref": "SlavePort"},
                "Protocol": "tcp"
              }
            ],
            "Essential": { "Ref": "MasterTaskEssential" },
            "MountPoints": [
              {
                "SourceVolume": "data-volume",
                "ContainerPath": "/var/jenkins_home"
              }
            ]
          }
        ],
        "Volumes": [
          {
            "Host": {
              "SourcePath": "/data/"
            },
            "Name": "data-volume"
          }
        ]
      }
    },
    "ECSSlaveTaskDefinition": {
      "Type": "AWS::ECS::TaskDefinition",
      "DependsOn": ["TaskExecutionRole"],
      "Properties": {
        "RequiresCompatibilities": [
          { "Ref": "LaunchType" }
        ],
        "NetworkMode": "bridge",
        "Cpu": {
          "Fn::If" : [
            "HasJenkinsSlaveTaskCpu",
            {"Ref": "JenkinsSlaveTaskCpu"},
            {"Ref" : "AWS::NoValue"}
          ]
        },
        "Memory": {
          "Fn::If" : [
            "HasJenkinsSlaveTaskMemory",
            {"Ref": "JenkinsSlaveTaskMemory"},
            {"Ref" : "AWS::NoValue"}
          ]
        },
        "ExecutionRoleArn": {
          "Fn::GetAtt": ["TaskExecutionRole", "Arn"]
        },
        "Family": "jenkins-slave",
        "ContainerDefinitions": [
          {
            "Name": "jenkins-slave",
            "Environment": [
              {
                "Name": "AWS_ACCOUNT_ID",
                "Value": { "Ref" : "AWS::AccountId" }
              },
              {
                "Name": "AWS_REGION",
                "Value": { "Ref" : "AWS::Region" }
              },
              {
                "Name": "ECS_CLUSTER",
                "Value": {"Ref": "SlaveCluster"}
              },
              {
                "Name": "ECS_CLUSTER_ARN",
                "Value": {
                  "Fn::GetAtt": [
                    "SlaveCluster",
                    "Arn"
                  ]
                }
              },
              {
                "Name": "BUILD_SLAVES_LOG_GROUP",
                "Value": { "Ref" : "CloudwatchLogsGroupBuildSlaves"}
              }
            ],
            "Image": {"Ref": "SlaveImageName"},
            "Cpu": {
              "Fn::If" : [
                "HasJenkinsSlaveContainerCpu",
                {"Ref": "JenkinsSlaveContainerCpu"},
                {"Ref" : "AWS::NoValue"}
              ]
            },
            "Memory": {
              "Fn::If" : [
                "HasJenkinsSlaveContainerMemory",
                {"Ref": "JenkinsSlaveContainerMemory"},
                {"Ref" : "AWS::NoValue"}
              ]
            },
            "MemoryReservation": {
              "Fn::If" : [
                "HasJenkinsSlaveMemoryReservation",
                {"Ref": "JenkinsSlaveMemoryReservation"},
                {"Ref" : "AWS::NoValue"}
              ]
            },
            "LogConfiguration": {
              "LogDriver":"awslogs",
              "Options": {
                "awslogs-group": {
                  "Ref":"CloudwatchLogsGroup"
                },
                "awslogs-region": {
                  "Ref":"AWS::Region"
                },
                "awslogs-stream-prefix": "jenkins-slave"
              }
            },
            "PortMappings": [
              {
                "ContainerPort": {"Ref": "ContainerPort"},
                "Protocol": "tcp"
              },
              {
                "ContainerPort": {"Ref": "SlavePort"},
                "Protocol": "tcp"
              }
            ],
            "Essential": { "Ref": "SlaveTaskEssential" },
            "MountPoints": [
              {
                "SourceVolume": "data-volume",
                "ContainerPath": "/var/jenkins_home"
              }
            ]
          }
        ],
        "Volumes": [
          {
            "Host": {
              "SourcePath": "/data/"
            },
            "Name": "data-volume"
          }
        ]
      }
    },
    "ECSMasterService": {
      "Type" : "AWS::ECS::Service",
      "DependsOn": ["ApplicationELB", "Listener80", "Listener443"],
      "Properties" : {
        "Cluster" : { "Ref": "MasterCluster" },
        "DeploymentConfiguration" : {
          "MaximumPercent" : { "Ref": "MaximumPercent" },
          "MinimumHealthyPercent" : { "Ref": "MinimumHealthyPercent" }
        },
        "DesiredCount" : { "Ref": "DesiredJenkinsMasterTaskCount" },
        "HealthCheckGracePeriodSeconds" : { "Ref": "HealthCheckGracePeriodSeconds" },
        "LaunchType" : { "Ref" : "LaunchType" },
        "LoadBalancers" : [
          {
            "ContainerName" : {"Ref": "MasterImageName"},
            "ContainerPort" : { "Ref": "ContainerPort" },
            "TargetGroupArn": {"Ref": "TargetGroup"}
          }
        ],
        "NetworkConfiguration" : {
          "AwsvpcConfiguration" : {
            "AssignPublicIp" : {
              "Fn::If": [
                "IsFargate",
                { "Ref": "AssignPublicIp" },
                { "Ref" : "AWS::NoValue" }
              ]
            },
            "SecurityGroups" : [
              { "Ref": "WebSG" }
            ],
            "Subnets" : [
              {"Fn::ImportValue": { "Fn::Sub": [
                "${VPCPrefix}-vpc-${PublicOrPrivate}SubnetAZ1", {
                  "VPCPrefix": {"Ref": "VPCPrefix"},
                  "PublicOrPrivate": {"Ref": "WebSubnets"}
                }]
              }},
              {"Fn::ImportValue": { "Fn::Sub": [
                "${VPCPrefix}-vpc-${PublicOrPrivate}SubnetAZ2", {
                  "VPCPrefix": {"Ref": "VPCPrefix"},
                  "PublicOrPrivate": {"Ref": "WebSubnets"}
                }]
              }}
            ]
          }
        },
        "PlacementConstraints" : [{
          "Fn::If" : [
            "HasPlacementConstraints",
            {
              "Type": { "Ref" : "PlacementConstraintsType" },
              "Expression": {
                "Fn::If": [
                  "HasPlacementConstraintsExpression",
                  { "Ref" : "PlacementConstraintsExpression" },
                  {"Ref": "AWS::NoValue"}
                ]
              }
            },
            {"Ref" : "AWS::NoValue"}
          ]
        }],
        "PlacementStrategies" : [{
          "Fn::If" : [
            "HasPlacementStrategies",
            {
              "Type": { "Ref" : "PlacementStrategiesType" },
              "Field": { "Ref" : "PlacementStrategiesField" }
            },
            {"Ref" : "AWS::NoValue"}
          ]
        }],
        "PlatformVersion": {
          "Fn::If": [
            "IsFargate",
            { "Ref": "PlatformVersion" },
            { "Ref" : "AWS::NoValue" }
          ]
        },
        "TaskDefinition" : { "Ref": "ECSMasterTaskDefinition" }
      }
    },
    "ApplicationELB": {
      "Properties": {
        "IpAddressType": "ipv4",
        "LoadBalancerAttributes": [
          {"Fn::If": [
            "IsInternalELB",
            {"Ref": "AWS::NoValue"},
            {
              "Key":"idle_timeout.timeout_seconds",
              "Value":"30"
            }
          ]}
        ],
        "Scheme": {
          "Fn::If": [
            "IsInternalELB",
            "internal",
            "internet-facing"
          ]
        },
        "SecurityGroups": [
          { "Ref" : "ApplicationELBSG"}
        ],
        "Subnets" : [
          {"Fn::ImportValue": { "Fn::Sub": [
            "${VPCPrefix}-vpc-${PublicOrPrivate}SubnetAZ1", {
              "VPCPrefix": {"Ref": "VPCPrefix"},
              "PublicOrPrivate": {"Ref": "ELBSubnets"}
              }]
          }},
          {"Fn::ImportValue": { "Fn::Sub": [
            "${VPCPrefix}-vpc-${PublicOrPrivate}SubnetAZ2", {
              "VPCPrefix": {"Ref": "VPCPrefix"},
              "PublicOrPrivate": {"Ref": "ELBSubnets"}
            }]
          }}
        ],
        "Tags": [
          {
            "Key": "ECSCluster",
            "Value": { "Ref": "MasterCluster" }
          }
        ]
      },
      "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer"
    },
    "Listener443": {
      "Properties": {
        "Certificates": [
          {
            "CertificateArn": {"Ref": "SSLCertificateARN"}
          }
        ],
        "DefaultActions": [
          {
            "TargetGroupArn": {
              "Ref": "TargetGroup"
            },
            "Type": "forward"
          }
        ],
        "LoadBalancerArn": {
          "Ref": "ApplicationELB"
        },
        "Port": 443,
        "Protocol": "HTTPS"
      },
      "Type": "AWS::ElasticLoadBalancingV2::Listener"
    },
    "Listener80": {
      "Properties": {
        "DefaultActions": [
          {
            "TargetGroupArn": {
              "Ref": "TargetGroup"
            },
            "Type": "forward"
          }
        ],
        "LoadBalancerArn": {
          "Ref": "ApplicationELB"
        },
        "Port": 80,
        "Protocol": "HTTP"
      },
      "Type": "AWS::ElasticLoadBalancingV2::Listener"
    },
    "TargetGroup": {
      "DependsOn": "ApplicationELB",
      "Properties": {
        "HealthCheckIntervalSeconds": 10,
        "HealthCheckPath": "/login",
        "HealthCheckProtocol": "HTTP",
        "HealthCheckTimeoutSeconds": 5,
        "HealthyThresholdCount": 2,
        "Port": {"Ref": "ContainerPort"},
        "Protocol": "HTTP",
        "Tags": [
          {
            "Key": "ECSCluster",
            "Value": { "Ref": "MasterCluster" }
          }
        ],
        "TargetGroupAttributes": [
          {
            "Key": "deregistration_delay.timeout_seconds",
            "Value": "0"
          },
          {
            "Key": "stickiness.enabled",
            "Value": "false"
          }
        ],
        "TargetType": "ip",
        "UnhealthyThresholdCount": 2,
        "VpcId": {
          "Fn::ImportValue": {"Fn::Sub": [
            "${VPCPrefix}-vpc-VPC", {"VPCPrefix": {"Ref": "VPCPrefix"}}
          ]}
        }
      },
      "Type": "AWS::ElasticLoadBalancingV2::TargetGroup"
    },
    "ApplicationELBSG": {
      "Properties": {
        "GroupDescription": "Application ELB security group.",
        "Tags": [
          {
            "Key": "Name",
            "Value": {"Fn::Sub": [
              "${StackName}-elb-sg", {
                "StackName": {"Ref": "AWS::StackName"}
              }
            ]}
          }
        ],
        "VpcId": {
          "Fn::ImportValue": {"Fn::Sub": [
            "${VPCPrefix}-vpc-VPC", {"VPCPrefix": {"Ref": "VPCPrefix"}}
          ]}
        }
      },
      "Type": "AWS::EC2::SecurityGroup"
    },
    "ECSAutoScalingGroup":{
      "Type":"AWS::AutoScaling::AutoScalingGroup",
      "DependsOn": ["EFSJenkinsMountTargetAZ1", "EFSJenkinsMountTargetAZ2"],
      "Properties": {
        "VPCZoneIdentifier": [
          {"Fn::ImportValue": { "Fn::Sub": [
            "${VPCPrefix}-vpc-${PublicOrPrivate}SubnetAZ1", {
              "VPCPrefix": {"Ref": "VPCPrefix"},
              "PublicOrPrivate": {"Ref": "WebSubnets"}
            }]
          }},
          {"Fn::ImportValue": { "Fn::Sub": [
            "${VPCPrefix}-vpc-${PublicOrPrivate}SubnetAZ2", {
              "VPCPrefix": {"Ref": "VPCPrefix"},
              "PublicOrPrivate": {"Ref": "WebSubnets"}
            }]
          }}
        ],
        "LaunchConfigurationName": {
          "Ref": "MasterContainerInstances"
        },
        "MinSize": {
          "Fn::If": [
            "IsFargate",
            "0",
            { "Ref": "MinMasterECSInstances" }
          ]
        },
        "MaxSize": {
          "Fn::If": [
            "IsFargate",
            "0",
            { "Ref": "MaxMasterECSInstances" }
          ]
        },
        "DesiredCapacity": {
          "Fn::If": [
            "IsFargate",
            "0",
            { "Ref": "DesiredMasterECSInstances" }
          ]
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {"Fn::Join": ["-", [
              { "Ref": "MasterCluster"},
              "ECSInstance"
            ]]},
            "PropagateAtLaunch": "true"
          }
        ]
      },
      "CreationPolicy": {
        "ResourceSignal": {
          "Fn::If": [
            "IsFargate",
            { "Ref" : "AWS::NoValue" },
            { "Timeout": "PT15M" }
          ]
        }
      },
      "UpdatePolicy": {
        "AutoScalingReplacingUpdate": {
          "WillReplace": "true"
        }
      }
    },
    "ECSSlaveAutoScalingGroup":{
      "Type":"AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "VPCZoneIdentifier": [
          {"Fn::ImportValue": { "Fn::Sub": [
            "${VPCPrefix}-vpc-${PublicOrPrivate}SubnetAZ1", {
              "VPCPrefix": {"Ref": "VPCPrefix"},
              "PublicOrPrivate": {"Ref": "WebSubnets"}
            }]
          }},
          {"Fn::ImportValue": { "Fn::Sub": [
            "${VPCPrefix}-vpc-${PublicOrPrivate}SubnetAZ2", {
              "VPCPrefix": {"Ref": "VPCPrefix"},
              "PublicOrPrivate": {"Ref": "WebSubnets"}
            }]
          }}
        ],
        "LaunchConfigurationName": {
          "Ref": "SlaveContainerInstances"
        },
        "MinSize": {
          "Fn::If": [
            "IsFargate",
            "0",
            { "Ref": "MinSlaveECSInstances" }
          ]
        },
        "MaxSize": {
          "Fn::If": [
            "IsFargate",
            "0",
            { "Ref": "MaxSlaveECSInstances" }
          ]
        },
        "DesiredCapacity": {
          "Fn::If": [
            "IsFargate",
            "0",
            { "Ref": "DesiredSlaveECSInstances" }
          ]
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {"Fn::Join": ["-", [
              { "Ref": "SlaveCluster"},
              "ECSInstance"
            ]]},
            "PropagateAtLaunch": "true"
          }
        ]
      },
      "CreationPolicy": {
        "ResourceSignal": {
          "Fn::If": [
            "IsFargate",
            { "Ref" : "AWS::NoValue" },
            { "Timeout": "PT15M" }
          ]
        }
      },
      "UpdatePolicy": {
        "AutoScalingReplacingUpdate": {
          "WillReplace": "true"
        }
      }
    },
    "MasterContainerInstances":{
      "Type":"AWS::AutoScaling::LaunchConfiguration",
      "Properties":{
        "ImageId":{
          "Fn::FindInMap":[
            "RegionalConfigs",
            {
              "Ref":"AWS::Region"
            },
            "AMI"
          ]
        },
        "SecurityGroups": [{
          "Ref": "WebSG"
        }],
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/xvdcz",
            "Ebs": {
              "VolumeSize": "50",
              "DeleteOnTermination": true
            }
          }
        ],
        "InstanceType": { "Ref": "InstanceType" },
        "IamInstanceProfile": { "Ref": "EC2InstanceProfile" },
        "KeyName": {"Ref": "KeyPairName"},
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash -xe\n",
                "echo ECS_CLUSTER=",
                {
                  "Ref": "MasterCluster"
                },
                " >> /etc/ecs/ecs.config\n",

                "#Mount EFS volume\n",
                "yum install -y amazon-efs-utils\n",
                "EFS_FILE_SYSTEM_ID=",
                {
                  "Ref": "EFSJenkinsFileSystem"
                },
                "\n",
                "mkdir /data\n",
                "mount -t efs $EFS_FILE_SYSTEM_ID:/ /data\n",
                "#Give ownership to jenkins user\n",
                "chown 1000 /data\n",

                "yum install -y aws-cfn-bootstrap\n",
                "/opt/aws/bin/cfn-signal -e $? ",
                "         --stack ",
                {
                  "Ref":"AWS::StackName"
                },
                "         --resource ECSAutoScalingGroup ",
                "         --region ",
                {
                  "Ref":"AWS::Region"
                },
                "\n"
              ]
            ]
          }
        }
      }
    },
    "SlaveContainerInstances":{
      "Type":"AWS::AutoScaling::LaunchConfiguration",
      "Properties":{
        "ImageId":{
          "Fn::FindInMap":[
            "RegionalConfigs",
            {
              "Ref":"AWS::Region"
            },
            "AMI"
          ]
        },
        "SecurityGroups": [{
          "Ref": "WebSG"
        }],
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/xvdcz",
            "Ebs": {
              "VolumeSize": "50",
              "DeleteOnTermination": true
            }
          }
        ],
        "InstanceType": { "Ref": "InstanceType" },
        "IamInstanceProfile": { "Ref": "EC2InstanceProfile" },
        "KeyName": {"Ref": "KeyPairName"},
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash -xe\n",
                "echo ECS_CLUSTER=",
                {
                  "Ref": "SlaveCluster"
                },
                " >> /etc/ecs/ecs.config\n",

                "yum install -y aws-cfn-bootstrap\n",
                "/opt/aws/bin/cfn-signal -e $? ",
                "         --stack ",
                {
                  "Ref":"AWS::StackName"
                },
                "         --resource ECSSlaveAutoScalingGroup ",
                "         --region ",
                {
                  "Ref":"AWS::Region"
                },
                "\n"
              ]
            ]
          }
        }
      }
    },
    "EC2Role":{
      "Type":"AWS::IAM::Role",
      "Properties":{
        "AssumeRolePolicyDocument":{
          "Statement":[
            {
              "Effect":"Allow",
              "Principal":{
                "Service":[
                  "ec2.amazonaws.com"
                ]
              },
              "Action":[
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path":"/",
        "Policies":[
          {
            "PolicyName":"ecs-service",
            "PolicyDocument":{
              "Statement":[
                {
                  "Effect":"Allow",
                  "Action":["*"],
                  "Resource":"*"
                }
              ]
            }
          }
        ]
      }
    },
    "AutoscalingRole":{
      "Type":"AWS::IAM::Role",
      "Properties":{
        "AssumeRolePolicyDocument":{
          "Statement":[
            {
              "Effect":"Allow",
              "Principal":{
                "Service":[
                  "application-autoscaling.amazonaws.com"
                ]
              },
              "Action":[
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path":"/",
        "Policies":[
          {
            "PolicyName":"service-autoscaling",
            "PolicyDocument":{
              "Statement":[
                {
                  "Effect":"Allow",
                  "Action":[
                    "application-autoscaling:*",
                    "cloudwatch:DescribeAlarms",
                    "cloudwatch:PutMetricAlarm",
                    "ecs:DescribeServices",
                    "ecs:UpdateService"
                  ],
                  "Resource":"*"
                }
              ]
            }
          }
        ]
      }
    },
    "EC2InstanceProfile":{
      "Type":"AWS::IAM::InstanceProfile",
      "Properties":{
        "Path":"/",
        "Roles":[
          {
            "Ref":"EC2Role"
          }
        ]
      }
    },
    "ELBToELB": {
      "Properties": {
        "FromPort": "-1",
        "GroupId": {
          "Ref": "ApplicationELBSG"
        },
        "IpProtocol": "-1",
        "SourceSecurityGroupId": {
          "Ref": "ApplicationELBSG"
        },
        "ToPort": "-1"
      },
      "Type": "AWS::EC2::SecurityGroupIngress"
    },
    "WorldHttpsToELB": {
      "Properties": {
        "CidrIp": {"Ref": "IpWhitelist"},
        "FromPort": "443",
        "GroupId": {
          "Ref": "ApplicationELBSG"
        },
        "IpProtocol": "tcp",
        "ToPort": "443"
      },
      "Type": "AWS::EC2::SecurityGroupIngress"
    },
    "WebToWeb": {
      "Properties": {
        "FromPort": "-1",
        "GroupId": {
          "Ref": "WebSG"
        },
        "IpProtocol": "-1",
        "SourceSecurityGroupId": {
          "Ref": "WebSG"
        },
        "ToPort": "-1"
      },
      "Type": "AWS::EC2::SecurityGroupIngress"
    },
    "WebToEFS": {
      "Properties": {
        "FromPort": "2049",
        "GroupId": {
          "Ref": "EFSSecurityGroup"
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Ref": "WebSG"
        },
        "ToPort": "2049"
      },
      "Type": "AWS::EC2::SecurityGroupIngress"
    },
    "MainVPCToWeb": {
      "Properties": {
        "FromPort": "-1",
        "CidrIp": "10.0.0.0/16",
        "IpProtocol": "-1",
        "GroupId": {
          "Ref": "WebSG"
        },
        "ToPort": "-1"
      },
      "Type": "AWS::EC2::SecurityGroupIngress"
    },
    "MainVPCToELB": {
      "Properties": {
        "FromPort": "-1",
        "CidrIp": "10.0.0.0/16",
        "IpProtocol": "-1",
        "GroupId": {
          "Ref": "ApplicationELBSG"
        },
        "ToPort": "-1"
      },
      "Type": "AWS::EC2::SecurityGroupIngress"
    },
    "ELBToWeb": {
      "Properties": {
        "FromPort": {"Ref": "ContainerPort"},
        "GroupId": {
          "Ref": "WebSG"
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Ref": "ApplicationELBSG"
        },
        "ToPort": {"Ref": "ContainerPort"}
      },
      "Type": "AWS::EC2::SecurityGroupIngress"
    },
    "WebSG": {
      "Properties": {
        "GroupDescription": "Web security group.",
        "Tags": [
          {
            "Key": "Name",
            "Value": {"Fn::Sub": [
              "${StackName}-web-sg", {
                "StackName": {"Ref": "AWS::StackName"}
              }
            ]}
          }
        ],
        "VpcId": {
          "Fn::ImportValue": {"Fn::Sub": [
            "${VPCPrefix}-vpc-VPC", {"VPCPrefix": {"Ref": "VPCPrefix"}}
          ]}
        }
      },
      "Type": "AWS::EC2::SecurityGroup"
    },
    "DnsRecordSetGroup": {
      "Properties": {
        "HostedZoneId": {
          "Ref": "HostedZoneId"
        },
        "RecordSets": [
          {
            "AliasTarget": {
              "DNSName": {
                "Fn::GetAtt": [
                  "ApplicationELB",
                  "DNSName"
                ]
              },
              "HostedZoneId": {
                "Fn::GetAtt": [
                  "ApplicationELB",
                  "CanonicalHostedZoneID"
                ]
              }
            },
            "Name": {"Fn::Join": ["", [
              { "Fn::If": [
                "IsProd",
                "",
                {
                  "Fn::Join": ["", [
                    {"Ref": "Environment"},
                    "."
                  ]]
                }
              ]},
              {"Ref": "Domain"}
            ]]},
            "Type": "A"
          }
        ]
      },
      "Type": "AWS::Route53::RecordSetGroup"
    }
  },
  "Outputs": {
    "ServiceURL" : {
      "Description" : "The URL of the service",
      "Value": {"Fn::Join": ["", [
        "https://",
        { "Fn::If": [
          "IsProd",
          "",
          {
            "Fn::Join": ["", [
              {"Ref": "Environment"},
              "."
            ]]
          }
        ]},
        {"Ref": "Domain"}
      ]]}
    }
  }
}
