{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description" : "Generates all resources required for a single container ECS service.",
  "Parameters": {
    "ProjectName": {
      "Description": "The name of your project.",
      "MinLength": "1",
      "MaxLength": "20",
      "AllowedPattern": "^[a-z]+[\\-a-z0-9]*[a-z0-9]+",
      "ConstraintDescription": "User all lowercase, dashes, or numbers (demo-project) between 1 and 20 characters in length. Must not start with a number, and must not start or end with a dash.",
      "Type": "String"
    },
    "Environment": {
      "Description": "The environment to deploy the instance to.",
      "Type": "String"
    },
    "Domain": {
      "Description": "The domain name that this service will fall under.",
      "Type": "String"
    },
    "SSLCertificateARN": {
      "Description": "The AWS ACM Certificate ARN.",
      "Type": "String"
    },
    "HostedZoneId": {
      "Description": "The Route53 hosted zone id that this service will fall under.",
      "Type": "String"
    },
    "KeyPairName":{
      "Type":"AWS::EC2::KeyPair::KeyName",
      "Description":"Name of an existing EC2 KeyPair to enable SSH access to the ECS instances."
    },
    "NetworkMode": {
      "Description": "The Docker networking mode to use for the containers in the task, such as none, bridge, or host. For Fargate launch types, you can specify awsvpc only. The none, bridge, or host option won't work for Fargate launch types.",
      "Default": "awsvpc",
      "Type": "String"
    },
    "Cpu": {
      "Description": "The number of cpu units used by the task. If you are using the Fargate launch type, this field is required. {Cpu: (Allowed Memory), ...} --> {256: (0.5GB, 1GB, 2GB), 512: (1GB, 2GB, 3GB, 4GB), 1024: (2GB, 3GB, 4GB, 5GB, 6GB, 7GB, 8GB), 2048: (Between 4GB and 16GB in 1GB increments), 4096: (Between 8GB and 30GB in 1GB increments) See https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-taskdefinition.html",
      "Default": "256",
      "AllowedValues": ["256", "512", "1024", "2048", "4096"],
      "Type": "String"
    },
    "Memory": {
      "Description": "The amount (in MiB) of memory used by the task. If you are using the Fargate launch type, this field is required and you must use one of the following values, which determines your range of valid values for the cpu parameter. {Cpu: (Allowed Memory), ...} --> {256: (0.5GB, 1GB, 2GB), 512: (1GB, 2GB, 3GB, 4GB), 1024: (2GB, 3GB, 4GB, 5GB, 6GB, 7GB, 8GB), 2048: (Between 4GB and 16GB in 1GB increments), 4096: (Between 8GB and 30GB in 1GB increments) See https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-taskdefinition.html",
      "Default": "0.5GB",
      "AllowedValues": ["0.5GB", "1GB", "2GB", "3GB", "4GB", "5GB", "6GB", "7GB", "8GB", "9GB", "10GB", "11GB", "12GB", "13GB", "14GB", "15GB", "16GB", "17GB", "18GB", "19GB", "20GB", "21GB", "22GB", "23GB", "24GB", "25GB", "26GB", "27GB", "28GB", "29GB", "30GB"],
      "Type": "String"
    },
    "Essential": {
      "Description": "Indicates whether the task stops if this container fails. If you specify true and the container fails, all other containers in the task stop. If you specify false and the container fails, none of the other containers in the task is affected. This value is true by default.",
      "Default": "true",
      "AllowedValues": ["true", "false"],
      "Type": "String"
    },
    "ImageName": {
      "Description": "The short name of the ECR Image",
      "Type": "String"
    },
    "ImageVersion": {
      "Description": "The version of the ECR Image",
      "Default": "latest",
      "Type": "String"
    },
    "LaunchType": {
      "Description": "ECS Launch Type",
      "AllowedValues": ["FARGATE", "EC2"],
      "Default": "FARGATE",
      "Type": "String"
    },
    "MaximumPercent": {
      "Description": "The maximum number of tasks, specified as a percentage of the Amazon ECS service's DesiredCount value, that can run in a service during a deployment",
      "Default": "200",
      "Type": "Number"
    },
    "MinimumHealthyPercent": {
      "Description": "The minimum number of tasks, specified as a percentage of the Amazon ECS service's DesiredTaskCount value, that must continue to run and remain healthy during a deployment",
      "Default": "50",
      "Type": "Number"
    },
    "DesiredTaskCount": {
      "Description": "The number of simultaneous tasks that you want to run on the cluster. Specify the tasks with the TaskDefinition property",
      "Type": "Number",
      "Default": "1"
    },
    "HealthCheckGracePeriodSeconds": {
      "Description": "The period of time, in seconds, that the Amazon ECS service scheduler ignores unhealthy Elastic Load Balancing target health checks after a task has first started.",
      "Default": "0",
      "Type": "Number"
    },
    "ContainerPort": {
      "Description": "The port number on the container to direct load balancer traffic to. Your container instances must allow ingress traffic on this port.",
      "Type": "Number"
    },
    "SlavePort": {
      "Description": "The listen port for Jenkins JNLP slaves.",
      "Type": "Number"
    },
    "AssignPublicIp": {
      "Description": "Whether to assign a public IP.",
      "AllowedValues": ["ENABLED", "DISABLED"],
      "Default": "DISABLED",
      "Type": "String"
    },
    "PlacementConstraintsType": {
      "Description": "Optional. To ensure that each task in a particular group is running on a different container instance, use distinctInstance. To restrict the selection to a group of valid candidates, use memberOf. distinctInstance is not supported in task definitions.",
      "AllowedValues": ["distinctInstance", "memberOf", ""],
      "Default": "",
      "Type": "String"
    },
    "PlacementConstraintsExpression": {
      "Description": "Totally optional, even if you specify a PlacementConstraintsType. A cluster query language expression to apply to the constraint. If the constraint type is distinctInstance, you can't specify an expression. See https://docs.aws.amazon.com/AmazonECS/latest/developerguide/cluster-query-language.html.",
      "Default": "",
      "Type": "String"
    },
    "PlacementStrategiesType": {
      "Description": "Optional. The type of placement strategy. The random placement strategy randomly places tasks on available candidates. The spread placement strategy spreads placement across available candidates evenly based on the field parameter. The binpack strategy places tasks on available candidates that have the least available amount of the resource that is specified with the field parameter. For example, if you binpack on memory, a task is placed on the instance with the least amount of remaining memory (but still enough to run the task",
      "AllowedValues": ["random", "spread", "binpack", ""],
      "Default": "",
      "Type": "String"
    },
    "PlacementStrategiesField": {
      "Description": "Optional only if PlacementStrategiesType is blank or random. The field to apply the placement strategy against. For the spread placement strategy, valid values are instanceId (or host, which has the same effect), or any platform or custom attribute that is applied to a container instance, such as attribute:ecs.availability-zone. For the binpack placement strategy, valid values are cpu and memory. For the random placement strategy, this field is not used.",
      "Default": "",
      "Type": "String"
    },
    "PlatformVersion": {
      "Description": "The platform version on which to run your service. If one is not specified, the latest version will be used by default.",
      "Default": "LATEST",
      "AllowedValues": ["LATEST", "1.0.0"],
      "Type": "String"
    },
    "WebSubnets": {
      "Description": "The type of subnets to place this web service in.",
      "AllowedValues": ["Public", "Private"],
      "Default": "Public",
      "Type": "String"
    },
    "ELBSubnets": {
      "Description": "The type of subnets to place the ELB for this service in.",
      "AllowedValues": ["Public", "Private"],
      "Default": "Public",
      "Type": "String"
    },
    "Scheme": {
      "Description": "The elastic load balancer schema",
      "AllowedValues": ["internal", "internet-facing"],
      "Default": "internal",
      "Type": "String"
    },
    "VPCPrefix": {
      "Description": "The 'export' name prefix of the cloudformation stack for the VPC used by this service.",
      "Type": "String"
    },
    "DesiredECSInstances": {
      "Type":"Number",
      "Default":"1",
      "Description":"Number of ECS instances to launch in your ECS cluster for this service. Your instance may be shared with other services in the cluster."
    },
    "MinECSInstances": {
      "Type":"Number",
      "Default":"1",
      "Description":"Minimum number of instances that can be launched in your ECS cluster. Your instance may be shared with other services in the cluster."
    },
    "MaxECSInstances": {
      "Type":"Number",
      "Default":"1",
      "Description":"Maximum number of instances that can be launched in your ECS cluster. Your instance may be shared with other services in the cluster."
    },
    "ContainerLogsRetentionDays": {
      "Type":"Number",
      "Default": 14,
      "Description":"Number of days to retain container logs for"
    },
    "InstanceType": {
      "Description":"EC2 instance type",
      "Type":"String",
      "Default":"m5.2xlarge",
      "AllowedValues":[
        "m5.large",
        "m5.xlarge",
        "m5.2xlarge",
        "m5.4xlarge",
        "m5.12xlarge",
        "m5.24xlarge",
        "c5.large",
        "c5.xlarge",
        "c5.2xlarge",
        "c5.4xlarge",
        "c5.9xlarge",
        "c5.18xlarge",
        "c5d.large",
        "c5d.xlarge",
        "c5d.2xlarge",
        "c5d.4xlarge",
        "c5d.9xlarge",
        "c5d.18xlarge",
        "i3.metal"
      ],
      "ConstraintDescription":"Reserved instances. Please choose a valid instance type from our reserved instance types."
    }
  },
  "Mappings":{
    "RegionalConfigs":{
      "us-east-1":{
        "AMI":"ami-aff65ad2",
      },
      "us-east-2":{
        "AMI":"ami-64300001",
      },
      "us-west-1":{
        "AMI":"ami-69677709",
      },
      "us-west-2":{
        "AMI":"ami-40ddb938",
      },
      "eu-west-1":{
        "AMI":"ami-2d386654",
      },
      "eu-central-1":{
        "AMI":"ami-9fc39c74",
      },
      "ap-northeast-1":{
        "AMI":"ami-a99d8ad5",
      },
      "ap-southeast-1":{
        "AMI":"ami-846144f8",
      },
      "ap-southeast-2":{
        "AMI":"ami-efda148d",
      }
    }
  },
  "Conditions": {
    "IsFargate" : {"Fn::Equals" : [
      {"Ref" : "LaunchType"}, "FARGATE"
    ]},
    "IsInternalELB": {"Fn::Equals": [
      {"Ref": "Scheme"}, "internal"
    ]},
    "IsProd" : {"Fn::Equals" : [
      {"Ref" : "Environment"},
      "prod"
    ]},
    "HasPlacementConstraints" : {"Fn::Not": [
      {"Fn::Equals" : [
        {"Ref" : "PlacementConstraintsType"}, ""
      ]}
    ]},
    "HasPlacementStrategies" : {"Fn::Not": [
      {"Fn::Equals" : [
        {"Ref" : "PlacementStrategiesType"}, ""
      ]}
    ]}
  },
  "Resources": {
    "Cluster": {
      "Type": "AWS::ECS::Cluster",
      "Properties" : {
        "ClusterName" : "jenkins"
      }
    },
    "JenkinsScaleUpPolicy": {
      "Type" : "AWS::AutoScaling::ScalingPolicy",
      "Properties" : {
        "AdjustmentType" : "ChangeInCapacity",
        "AutoScalingGroupName" : { "Ref": "ECSAutoScalingGroup" },
        "EstimatedInstanceWarmup" : 60,
        "MetricAggregationType" : "Average",
        "PolicyType" : "StepScaling",
        "StepAdjustments" : [ {
          "MetricIntervalLowerBound" : 0,
          "ScalingAdjustment" : 2
        }]
      }
    },
    "JenkinsScaleUpAlarm" : {
      "Type" : "AWS::CloudWatch::Alarm",
      "Properties" : {
        "AlarmDescription" : "CPU utilization peaked at 70% during the last minute",
        "AlarmName" : "JenkinsScaleUpAlarm",
        "AlarmActions": [ { "Ref": "JenkinsScaleUpPolicy" } ],
        "Dimensions" : [{
          "Name": "Cluster",
          "Value": {"Ref": "Cluster"}
        }],
        "MetricName" : "CPUReservation",
        "Namespace" : "AWS/ECS",
        "ComparisonOperator" : "GreaterThanOrEqualToThreshold",
        "Statistic" : "Maximum",
        "Threshold" : 70,
        "Period" : 60,
        "EvaluationPeriods": 1,
        "TreatMissingData" : "notBreaching"
      }
    },
    "JenkinsScaleDownPolicy": {
      "Type" : "AWS::AutoScaling::ScalingPolicy",
      "Properties" : {
        "AdjustmentType" : "PercentChangeInCapacity",
        "AutoScalingGroupName" : { "Ref": "ECSAutoScalingGroup" },
        "Cooldown"             : "120",
        "ScalingAdjustment"    : "-50"
      }
    },
    "JenkinsScaleDownAlarm" : {
      "Type" : "AWS::CloudWatch::Alarm",
      "Properties" : {
        "AlarmDescription" : "CPU utilization is under 50% for the last 10 min (change 10 min to 45 min for prod use as you pay by the hour )",
        "AlarmName" : "JenkinsScaleDownAlarm",
        "AlarmActions": [ { "Ref": "JenkinsScaleDownPolicy" } ],
        "Dimensions" : [{
          "Name": "Cluster",
          "Value": {"Ref": "Cluster"}
        }],
        "MetricName" : "CPUReservation",
        "Namespace" : "AWS/ECS",
        "ComparisonOperator" : "LessThanThreshold",
        "Statistic" : "Maximum",
        "Threshold" : 50,
        "Period" : 600,
        "EvaluationPeriods": 1,
        "TreatMissingData" : "notBreaching"
      }
    },
    "EFSSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Security group for EFS mount target",
        "VpcId": {
          "Fn::ImportValue": {"Fn::Sub": [
            "${VPCPrefix}-vpc-VPC", {"VPCPrefix": {"Ref": "VPCPrefix"}}
          ]}
        }
      }
    },
    "EFSJenkinsFileSystem": {
      "Type": "AWS::EFS::FileSystem",
      "Properties": {
        "FileSystemTags": [
          {
            "Key": "Name",
            "Value": "EFSJenkinsFileSystem"
          }
        ]
      }
    },
    "EFSJenkinsMountTargetAZ1": {
      "Type": "AWS::EFS::MountTarget",
      "Properties": {
        "FileSystemId": {
          "Ref": "EFSJenkinsFileSystem"
        },
        "SubnetId": {
          "Fn::ImportValue": { "Fn::Sub": [
            "${VPCPrefix}-vpc-${PublicOrPrivate}SubnetAZ1", {
              "VPCPrefix": {"Ref": "VPCPrefix"},
              "PublicOrPrivate": {"Ref": "WebSubnets"}
            }
          ]}
        },
        "SecurityGroups": [
          {
            "Ref": "EFSSecurityGroup"
          }
        ]
      }
    },
    "EFSJenkinsMountTargetAZ2": {
      "Type": "AWS::EFS::MountTarget",
      "Properties": {
        "FileSystemId": {
          "Ref": "EFSJenkinsFileSystem"
        },
        "SubnetId": {
          "Fn::ImportValue": { "Fn::Sub": [
            "${VPCPrefix}-vpc-${PublicOrPrivate}SubnetAZ2", {
              "VPCPrefix": {"Ref": "VPCPrefix"},
              "PublicOrPrivate": {"Ref": "WebSubnets"}
            }
          ]}
        },
        "SecurityGroups": [
          {
            "Ref": "EFSSecurityGroup"
          }
        ]
      }
    },
    "CloudwatchLogsGroup":{
      "Type":"AWS::Logs::LogGroup",
      "Properties":{
        "LogGroupName":{
          "Fn::Join":[
            "-",
            [
              "ECSLogGroup",
              {
                "Ref":"AWS::StackName"
              }
            ]
          ]
        },
        "RetentionInDays": {"Ref": "ContainerLogsRetentionDays"}
      }
    },
    "TaskExecutionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2008-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "ecs-tasks.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy"
        ],
        "RoleName": {"Fn::Join": ["-", [
          {"Ref": "ProjectName"},
          {"Ref": "Environment"},
          "ecs-task-exec"
        ]]}
      }
    },
    "ECSTaskDefinition": {
      "Type": "AWS::ECS::TaskDefinition",
      "DependsOn": ["TaskExecutionRole"],
      "Properties": {
        "RequiresCompatibilities": [
          { "Ref": "LaunchType" }
        ],
        "NetworkMode": { "Ref": "NetworkMode" },
        "Cpu": { "Ref": "Cpu" },
        "Memory": { "Ref": "Memory" },
        "ExecutionRoleArn": {
          "Fn::GetAtt": ["TaskExecutionRole", "Arn"]
        },
        "Family": "jenkins-master",
        "ContainerDefinitions": [
          {
            "Name": "jenkins-master",
            "Environment": [
              {
                "Name": "AWS_ACCOUNT_ID",
                "Value": { "Ref" : "AWS::AccountId" }
              },
              {
                "Name": "AWS_REGION",
                "Value": { "Ref" : "AWS::Region" }
              },
              {
                "Name": "ECS_CLUSTER",
                "Value": "jenkins"
              },
              {
                "Name": "ECS_CLUSTER_ARN",
                "Value": {
                  "Fn::GetAtt": [
                    "Cluster",
                    "Arn"
                  ]
                }
              }
            ],
            "Image": { "Fn::Join" : [ "", [
              {"Fn::Join": ["", [
                {"Ref": "AWS::AccountId"},
                ".dkr.ecr.",
                {"Ref": "AWS::Region"},
                ".amazonaws.com"
              ]]},
              "/",
              { "Ref": "ImageName"},
              ":",
              { "Ref": "ImageVersion" }
              ]]
            },
            "LogConfiguration": {
              "LogDriver":"awslogs",
              "Options": {
                "awslogs-group": {
                  "Ref":"CloudwatchLogsGroup"
                },
                "awslogs-region": {
                  "Ref":"AWS::Region"
                },
                "awslogs-stream-prefix": "jenkins-master"
              }
            },
            "PortMappings": [
              {
                "HostPort": {"Ref": "ContainerPort"},
                "ContainerPort": {"Ref": "ContainerPort"},
                "Protocol": "tcp"
              },
              {
                "HostPort": {"Ref": "SlavePort"},
                "ContainerPort": {"Ref": "SlavePort"},
                "Protocol": "tcp"
              }
            ],
            "Essential": { "Ref": "Essential" },
            "MountPoints": [
              {
                "SourceVolume": "data-volume",
                "ContainerPath": "/var/jenkins_home"
              }
            ]
          }
        ],
        "Volumes": [
          {
            "Host": {
              "SourcePath": "/data/"
            },
            "Name": "data-volume"
          }
        ]
      }
    },
    "ECSService": {
      "Type" : "AWS::ECS::Service",
      "DependsOn": ["ApplicationELB", "Listener80", "Listener443"],
      "Properties" : {
        "Cluster" : { "Ref": "Cluster" },
        "DeploymentConfiguration" : {
          "MaximumPercent" : { "Ref": "MaximumPercent" },
          "MinimumHealthyPercent" : { "Ref": "MinimumHealthyPercent" }
        },
        "DesiredCount" : { "Ref": "DesiredTaskCount" },
        "HealthCheckGracePeriodSeconds" : { "Ref": "HealthCheckGracePeriodSeconds" },
        "LaunchType" : { "Ref" : "LaunchType" },
        "LoadBalancers" : [
          {
            "ContainerName" : "jenkins-master",
            "ContainerPort" : { "Ref": "ContainerPort" },
            "TargetGroupArn": {"Ref": "TargetGroup"}
          }
        ],
        "NetworkConfiguration" : {
          "AwsvpcConfiguration" : {
            "AssignPublicIp" : {
              "Fn::If": [
                "IsFargate",
                { "Ref": "AssignPublicIp" },
                { "Ref" : "AWS::NoValue" }
              ]
            },
            "SecurityGroups" : [
              { "Ref": "WebSG" }
            ],
            "Subnets" : [
              {"Fn::ImportValue": { "Fn::Sub": [
                "${VPCPrefix}-vpc-${PublicOrPrivate}SubnetAZ1", {
                  "VPCPrefix": {"Ref": "VPCPrefix"},
                  "PublicOrPrivate": {"Ref": "WebSubnets"}
                }]
              }},
              {"Fn::ImportValue": { "Fn::Sub": [
                "${VPCPrefix}-vpc-${PublicOrPrivate}SubnetAZ2", {
                  "VPCPrefix": {"Ref": "VPCPrefix"},
                  "PublicOrPrivate": {"Ref": "WebSubnets"}
                }]
              }}
            ]
          }
        },
        "PlacementConstraints" : {
          "Fn::If" : [
            "HasPlacementConstraints",
            {
              "Type": { "Ref" : "PlacementConstraintsType" },
              "Expression": { "Ref" : "PlacementConstraintsExpression" }
            },
            {"Ref" : "AWS::NoValue"}
          ]
        },
        "PlacementStrategies" : {
          "Fn::If" : [
            "HasPlacementStrategies",
            {
              "Type": { "Ref" : "PlacementStrategiesType" },
              "Field": { "Ref" : "PlacementStrategiesField" }
            },
            {"Ref" : "AWS::NoValue"}
          ]
        },
        "PlatformVersion": {
          "Fn::If": [
            "IsFargate",
            { "Ref": "PlatformVersion" },
            { "Ref" : "AWS::NoValue" }
          ]
        },
        "TaskDefinition" : { "Ref": "ECSTaskDefinition" }
      }
    },
    "ApplicationELB": {
      "Properties": {
        "IpAddressType": "ipv4",
        "Name": "jenkins-elb",
        "LoadBalancerAttributes": {
          "Fn::If": [
            "IsInternalELB",
            {"Ref": "AWS::NoValue"},
            [
              {
                "Key":"idle_timeout.timeout_seconds",
                "Value":"30"
              }
            ]
          ]
        },
        "Scheme": {"Ref": "Scheme"},
        "SecurityGroups": [
          { "Ref" : "ApplicationELBSG"}
        ],
        "Subnets" : [
          {"Fn::ImportValue": { "Fn::Sub": [
            "${VPCPrefix}-vpc-${PublicOrPrivate}SubnetAZ1", {
              "VPCPrefix": {"Ref": "VPCPrefix"},
              "PublicOrPrivate": {"Ref": "ELBSubnets"}
              }]
          }},
          {"Fn::ImportValue": { "Fn::Sub": [
            "${VPCPrefix}-vpc-${PublicOrPrivate}SubnetAZ2", {
              "VPCPrefix": {"Ref": "VPCPrefix"},
              "PublicOrPrivate": {"Ref": "ELBSubnets"}
            }]
          }}
        ],
        "Tags": [
          {
            "Key": "ECSCluster",
            "Value": { "Ref": "Cluster" }
          }
        ]
      },
      "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer"
    },
    "Listener443": {
      "Properties": {
        "Certificates": [
          {
            "CertificateArn": {"Ref": "SSLCertificateARN"}
          }
        ],
        "DefaultActions": [
          {
            "TargetGroupArn": {
              "Ref": "TargetGroup"
            },
            "Type": "forward"
          }
        ],
        "LoadBalancerArn": {
          "Ref": "ApplicationELB"
        },
        "Port": 443,
        "Protocol": "HTTPS"
      },
      "Type": "AWS::ElasticLoadBalancingV2::Listener"
    },
    "Listener80": {
      "Properties": {
        "DefaultActions": [
          {
            "TargetGroupArn": {
              "Ref": "TargetGroup"
            },
            "Type": "forward"
          }
        ],
        "LoadBalancerArn": {
          "Ref": "ApplicationELB"
        },
        "Port": 80,
        "Protocol": "HTTP"
      },
      "Type": "AWS::ElasticLoadBalancingV2::Listener"
    },
    "TargetGroup": {
      "DependsOn": "ApplicationELB",
      "Properties": {
        "HealthCheckIntervalSeconds": 10,
        "HealthCheckPath": "/login",
        "HealthCheckProtocol": "HTTP",
        "HealthCheckTimeoutSeconds": 5,
        "HealthyThresholdCount": 2,
        "Port": {"Ref": "ContainerPort"},
        "Protocol": "HTTP",
        "Tags": [
          {
            "Key": "ECSCluster",
            "Value": { "Ref": "Cluster" }
          }
        ],
        "TargetGroupAttributes": [
          {
            "Key": "deregistration_delay.timeout_seconds",
            "Value": "0"
          },
          {
            "Key": "stickiness.enabled",
            "Value": "false"
          }
        ],
        "TargetType": "ip",
        "UnhealthyThresholdCount": 2,
        "VpcId": {
          "Fn::ImportValue": {"Fn::Sub": [
            "${VPCPrefix}-vpc-VPC", {"VPCPrefix": {"Ref": "VPCPrefix"}}
          ]}
        }
      },
      "Type": "AWS::ElasticLoadBalancingV2::TargetGroup"
    },
    "ApplicationELBSG": {
      "Properties": {
        "GroupDescription": "Application ELB security group.",
        "Tags": [
          {
            "Key": "Name",
            "Value": {"Fn::Sub": [
              "${StackName}-elb-sg", {
                "StackName": {"Ref": "AWS::StackName"}
              }
            ]}
          }
        ],
        "VpcId": {
          "Fn::ImportValue": {"Fn::Sub": [
            "${VPCPrefix}-vpc-VPC", {"VPCPrefix": {"Ref": "VPCPrefix"}}
          ]}
        }
      },
      "Type": "AWS::EC2::SecurityGroup"
    },
    "ECSAutoScalingGroup":{
      "Type":"AWS::AutoScaling::AutoScalingGroup",
      "DependsOn": ["EFSJenkinsMountTargetAZ1", "EFSJenkinsMountTargetAZ2"],
      "Properties": {
        "VPCZoneIdentifier": [
          {"Fn::ImportValue": { "Fn::Sub": [
            "${VPCPrefix}-vpc-${PublicOrPrivate}SubnetAZ1", {
              "VPCPrefix": {"Ref": "VPCPrefix"},
              "PublicOrPrivate": {"Ref": "WebSubnets"}
            }]
          }},
          {"Fn::ImportValue": { "Fn::Sub": [
            "${VPCPrefix}-vpc-${PublicOrPrivate}SubnetAZ2", {
              "VPCPrefix": {"Ref": "VPCPrefix"},
              "PublicOrPrivate": {"Ref": "WebSubnets"}
            }]
          }}
        ],
        "LaunchConfigurationName": {
          "Ref": "ContainerInstances"
        },
        "MinSize": {
          "Fn::If": [
            "IsFargate",
            "0",
            { "Ref": "MinECSInstances" }
          ]
        },
        "MaxSize": {
          "Fn::If": [
            "IsFargate",
            "0",
            { "Ref": "MaxECSInstances" }
          ]
        },
        "DesiredCapacity": {
          "Fn::If": [
            "IsFargate",
            "0",
            { "Ref": "DesiredECSInstances" }
          ]
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {"Fn::Join": ["-", [
              { "Ref": "Cluster"},
              "ECSInstance"
            ]]},
            "PropagateAtLaunch": "true"
          }
        ]
      },
      "CreationPolicy": {
        "ResourceSignal": {
          "Fn::If": [
            "IsFargate",
            { "Ref" : "AWS::NoValue" },
            { "Timeout": "PT15M" }
          ]
        }
      },
      "UpdatePolicy": {
        "AutoScalingReplacingUpdate": {
          "WillReplace": "true"
        }
      }
    },
    "ContainerInstances":{
      "Type":"AWS::AutoScaling::LaunchConfiguration",
      "Properties":{
        "ImageId":{
          "Fn::FindInMap":[
            "RegionalConfigs",
            {
              "Ref":"AWS::Region"
            },
            "AMI"
          ]
        },
        "SecurityGroups": [{
          "Ref": "WebSG"
        }],
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/xvdcz",
            "Ebs": {
              "VolumeSize": "50",
              "DeleteOnTermination": true
            }
          }
        ],
        "InstanceType": { "Ref": "InstanceType" },
        "IamInstanceProfile": { "Ref": "EC2InstanceProfile" },
        "KeyName": {"Ref": "KeyPairName"},
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash -xe\n",
                "echo ECS_CLUSTER=",
                {
                  "Ref": "Cluster"
                },
                " >> /etc/ecs/ecs.config\n",

                "#Mount EFS volume\n",
                "yum install -y amazon-efs-utils\n",
                "EFS_FILE_SYSTEM_ID=",
                {
                  "Ref": "EFSJenkinsFileSystem"
                },
                "\n",
                "mkdir /data\n",
                "mount -t efs $EFS_FILE_SYSTEM_ID:/ /data\n",
                "#Give ownership to jenkins user\n",
                "chown 1000 /data\n",

                "yum install -y aws-cfn-bootstrap\n",
                "/opt/aws/bin/cfn-signal -e $? ",
                "         --stack ",
                {
                  "Ref":"AWS::StackName"
                },
                "         --resource ECSAutoScalingGroup ",
                "         --region ",
                {
                  "Ref":"AWS::Region"
                },
                "\n"
              ]
            ]
          }
        }
      }
    },
    "EC2Role":{
      "Type":"AWS::IAM::Role",
      "Properties":{
        "AssumeRolePolicyDocument":{
          "Statement":[
            {
              "Effect":"Allow",
              "Principal":{
                "Service":[
                  "ec2.amazonaws.com"
                ]
              },
              "Action":[
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path":"/",
        "Policies":[
          {
            "PolicyName":"ecs-service",
            "PolicyDocument":{
              "Statement":[
                {
                  "Effect":"Allow",
                  "Action":["*"],
                  "Resource":"*"
                }
              ]
            }
          }
        ]
      }
    },
    "AutoscalingRole":{
      "Type":"AWS::IAM::Role",
      "Properties":{
        "AssumeRolePolicyDocument":{
          "Statement":[
            {
              "Effect":"Allow",
              "Principal":{
                "Service":[
                  "application-autoscaling.amazonaws.com"
                ]
              },
              "Action":[
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path":"/",
        "Policies":[
          {
            "PolicyName":"service-autoscaling",
            "PolicyDocument":{
              "Statement":[
                {
                  "Effect":"Allow",
                  "Action":[
                    "application-autoscaling:*",
                    "cloudwatch:DescribeAlarms",
                    "cloudwatch:PutMetricAlarm",
                    "ecs:DescribeServices",
                    "ecs:UpdateService"
                  ],
                  "Resource":"*"
                }
              ]
            }
          }
        ]
      }
    },
    "EC2InstanceProfile":{
      "Type":"AWS::IAM::InstanceProfile",
      "Properties":{
        "Path":"/",
        "Roles":[
          {
            "Ref":"EC2Role"
          }
        ]
      }
    },
    "ELBToELB": {
      "Properties": {
        "FromPort": "-1",
        "GroupId": {
          "Ref": "ApplicationELBSG"
        },
        "IpProtocol": "-1",
        "SourceSecurityGroupId": {
          "Ref": "ApplicationELBSG"
        },
        "ToPort": "-1"
      },
      "Type": "AWS::EC2::SecurityGroupIngress"
    },
    "WorldHttpsToELB": {
      "Properties": {
        "CidrIp": "0.0.0.0/0",
        "FromPort": "443",
        "GroupId": {
          "Ref": "ApplicationELBSG"
        },
        "IpProtocol": "tcp",
        "ToPort": "443"
      },
      "Type": "AWS::EC2::SecurityGroupIngress"
    },
    "WebToWeb": {
      "Properties": {
        "FromPort": "-1",
        "GroupId": {
          "Ref": "WebSG"
        },
        "IpProtocol": "-1",
        "SourceSecurityGroupId": {
          "Ref": "WebSG"
        },
        "ToPort": "-1"
      },
      "Type": "AWS::EC2::SecurityGroupIngress"
    },
    "WebToEFS": {
      "Properties": {
        "FromPort": "2049",
        "GroupId": {
          "Ref": "EFSSecurityGroup"
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Ref": "WebSG"
        },
        "ToPort": "2049"
      },
      "Type": "AWS::EC2::SecurityGroupIngress"
    },
    "MainVPCToWeb": {
      "Properties": {
        "FromPort": "-1",
        "CidrIp": "10.0.0.0/16",
        "IpProtocol": "-1",
        "GroupId": {
          "Ref": "WebSG"
        },
        "ToPort": "-1"
      },
      "Type": "AWS::EC2::SecurityGroupIngress"
    },
    "MainVPCToELB": {
      "Properties": {
        "FromPort": "-1",
        "CidrIp": "10.0.0.0/16",
        "IpProtocol": "-1",
        "GroupId": {
          "Ref": "ApplicationELBSG"
        },
        "ToPort": "-1"
      },
      "Type": "AWS::EC2::SecurityGroupIngress"
    },
    "ELBToWeb": {
      "Properties": {
        "FromPort": {"Ref": "ContainerPort"},
        "GroupId": {
          "Ref": "WebSG"
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Ref": "ApplicationELBSG"
        },
        "ToPort": {"Ref": "ContainerPort"}
      },
      "Type": "AWS::EC2::SecurityGroupIngress"
    },
    "WebSG": {
      "Properties": {
        "GroupDescription": "Web security group.",
        "Tags": [
          {
            "Key": "Name",
            "Value": {"Fn::Sub": [
              "${StackName}-web-sg", {
                "StackName": {"Ref": "AWS::StackName"}
              }
            ]}
          }
        ],
        "VpcId": {
          "Fn::ImportValue": {"Fn::Sub": [
            "${VPCPrefix}-vpc-VPC", {"VPCPrefix": {"Ref": "VPCPrefix"}}
          ]}
        }
      },
      "Type": "AWS::EC2::SecurityGroup"
    },
    "DnsRecordSetGroup": {
      "Properties": {
        "HostedZoneId": {
          "Ref": "HostedZoneId"
        },
        "RecordSets": [
          {
            "AliasTarget": {
              "DNSName": {
                "Fn::GetAtt": [
                  "ApplicationELB",
                  "DNSName"
                ]
              },
              "HostedZoneId": {
                "Fn::GetAtt": [
                  "ApplicationELB",
                  "CanonicalHostedZoneID"
                ]
              }
            },
            "Name": {"Fn::Join": ["", [
              { "Fn::If": [
                "IsProd",
                "",
                {
                  "Fn::Join": ["", [
                    {"Ref": "Environment"},
                    "."
                  ]]
                }
              ]},
              {"Ref": "Domain"}
            ]]},
            "Type": "A"
          }
        ]
      },
      "Type": "AWS::Route53::RecordSetGroup"
    }
  },
  "Outputs": {
    "ServiceURL" : {
      "Description" : "The URL of the service",
      "Value": {"Fn::Join": ["", [
        "https://",
        { "Fn::If": [
          "IsProd",
          "",
          {
            "Fn::Join": ["", [
              {"Ref": "Environment"},
              "."
            ]]
          }
        ]},
        {"Ref": "Domain"}
      ]]}
    }
  }
}
